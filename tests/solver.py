import unittest

from cozy.common import OrderedSet
from cozy.solver import satisfy, valid, satisfiable, IncrementalSolver, ModelCachingSolver
from cozy.typecheck import typecheck, retypecheck
from cozy.target_syntax import *
from cozy.structures.heaps import *
from cozy.syntax_tools import pprint, equal, implies, mk_lambda, free_vars

zero = ENum(0).with_type(TInt())
one  = ENum(1).with_type(TInt())

def check_encoding(e, require=ETRUE, **opts):
    v = fresh_var(e.type)
    m = satisfy(EAll([require, EEq(e, v)]), validate_model=True, **opts)
    assert m is not None

class TestSolver(unittest.TestCase):

    def test_symbolic_tuple(self):
        b = EVar("b").with_type(BOOL)
        x = EVar("x").with_type(TTuple((INT, INT)))
        y = EVar("y").with_type(TTuple((INT, INT)))
        e = equal(ETupleGet(ECond(b, x, y), 0), one)
        assert retypecheck(e)
        check_encoding(e)

    def test_the_empty(self):
        x = EEmptyList().with_type(TBag(TInt()))
        assert satisfy(EBinOp(EUnaryOp("the", x).with_type(INT), "==", one).with_type(TBool())) is None

    def test_the1(self):
        x = ESingleton(zero).with_type(TBag(TInt()))
        assert satisfy(EBinOp(EUnaryOp("the", x).with_type(INT), "==", zero).with_type(TBool())) is not None
        assert satisfy(EBinOp(EUnaryOp("the", x).with_type(INT), "==", one).with_type(TBool())) is None

    def test_the_acts_like_first(self):
        x = EBinOp(ESingleton(zero).with_type(TBag(TInt())), "+", ESingleton(one).with_type(TBag(TInt()))).with_type(TBag(TInt()))
        assert satisfy(EBinOp(EUnaryOp("the", x).with_type(INT), "==", zero).with_type(TBool())) is not None
        assert satisfy(EBinOp(EUnaryOp("the", x).with_type(INT), "==", one).with_type(TBool())) is None

    def test_the2(self):
        tgroup = TRecord((('name', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), ('groupList', TBag(TString())), ('members', TBag(TNative('org.xmpp.packet.JID'))), ('administrators', TBag(TNative('org.xmpp.packet.JID')))))
        groups = EVar('groups').with_type(TBag(THandle('groups', tgroup)))
        e = EUnaryOp('not', EBinOp(EUnaryOp('the', groups).with_type(THandle('groups', tgroup)), '==', EUnaryOp('the', EMap(EFilter(groups, ELambda(EVar('g').with_type(THandle('groups', tgroup)), EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('groups', tgroup)), 'val').with_type(tgroup), 'name').with_type(TString()), '==', EVar('name').with_type(TString())).with_type(TBool()))).with_type(TBag(THandle('groups', tgroup))), ELambda(EVar('g').with_type(THandle('groups', tgroup)), EVar('g').with_type(THandle('groups', tgroup)))).with_type(TBag(THandle('groups', tgroup)))).with_type(THandle('groups', tgroup))).with_type(TBool())).with_type(TBool())
        vars = [EVar('users').with_type(TBag(THandle('users', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))), EVar('rosterItems').with_type(TBag(THandle('rosterItems', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))))), groups, EVar('name').with_type(TString())]
        errs = typecheck(e, env={ v.id:v.type for v in vars })
        assert not errs
        assert satisfy(e, vars=vars, validate_model=True) is not None

    def test_empty_sum(self):
        x = EVar("x").with_type(TInt())
        model = satisfy(equal(x, EUnaryOp("sum", EEmptyList().with_type(TBag(TInt()))).with_type(INT)))
        assert model is not None
        assert model[x.id] == 0

    def test_symbolic_maps1(self):
        x = EVar("x").with_type(TMap(TInt(), TInt()))
        y = EVar("y").with_type(TMap(TInt(), TInt()))
        e = ENot(equal(x, y))
        check_encoding(e)

    def test_symbolic_maps2(self):
        x = EVar("x").with_type(TMap(TInt(), TInt()))
        e = ENot(equal(x, x))
        assert not satisfiable(e, validate_model=True)

    def test_symbolic_maps3(self):
        b = EVar("b").with_type(BOOL)
        x = EVar("x").with_type(TMap(INT, INT))
        y = EVar("y").with_type(TMap(INT, INT))
        z = EVar("z").with_type(INT)
        e = equal(EMapGet(ECond(b, x, y), z), z)
        assert retypecheck(e)
        check_encoding(e)

    def test_flatmap(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EUnaryOp('unique', EMap(EVar('ints').with_type(TBag(THandle('_HandleType12', TInt()))), ELambda(EVar('_var13').with_type(THandle('_HandleType12', TInt())), EGetField(EVar('_var13').with_type(THandle('_HandleType12', TInt())), 'val').with_type(TInt()))).with_type(TBag(TInt()))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('ints').with_type(TBag(THandle('_HandleType12', TInt())))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('unique', EFlatMap(EVar('ints').with_type(TBag(THandle('_HandleType12', TInt()))), ELambda(EVar('_var458').with_type(THandle('_HandleType12', TInt())), ESingleton(EVar('_var458').with_type(THandle('_HandleType12', TInt()))).with_type(TBag(THandle('_HandleType12', TInt()))))).with_type(TBag(THandle('_HandleType12', TInt())))).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=None, collection_depth=2, validate_model=True)

    def test_filter_true(self):
        xs = EVar("xs").with_type(TBag(THandle("X", INT)))
        e1 = EFilter(xs, mk_lambda(xs.type.elem_type, lambda x: equal(EGetField(x, "val"), ENum(0).with_type(INT))))
        assert retypecheck(e1)
        e2 = EFilter(e1, mk_lambda(xs.type.elem_type, lambda x: EBool(True)))
        assert retypecheck(e2)
        assert valid(equal(e1, e2))

    def test_make_record(self):
        t = TRecord((("f", INT), ("g", INT)))
        a = EVar("a").with_type(INT)
        b = EVar("b").with_type(INT)
        x = EMakeRecord((("f", a), ("g", b))).with_type(t)
        y = EMakeRecord((("f", b), ("g", a))).with_type(t)
        z = EMakeRecord((("g", b), ("f", a))).with_type(t)
        assert not valid(equal(x, y), validate_model=True)
        assert valid(equal(x, z), validate_model=True)

    def test_unary_minus(self):
        a = EVar("a").with_type(INT)
        check_encoding(ENot(equal(a, EUnaryOp("-", a).with_type(INT))))

    def test_distinct(self):
        a = EVar("a").with_type(TBag(INT))
        check_encoding(ENot(equal(a, EUnaryOp("distinct", a).with_type(TBag(INT)))))

    def test_unique_distinct(self):
        a = EVar("a").with_type(TBag(INT))
        assert valid(implies(EUnaryOp("unique", a).with_type(BOOL), equal(a, EUnaryOp("distinct", a).with_type(TBag(INT)))), validate_model=True)

    def test_distinct_of_empty(self):
        for t in (TSet, TBag, TList):
            e = EEmptyList().with_type(t(INT))
            x = EVar("x").with_type(e.type)
            check_encoding(EEq(x, EUnaryOp(UOp.Distinct, e).with_type(e.type)))

    def test_emap(self):
        e = EEq(
            EVar("xs").with_type(INT_BAG),
            EMap(EVar("ys").with_type(INT_BAG), mk_lambda(INT, lambda x: EBinOp(x, "+", ONE).with_type(INT))).with_type(INT_BAG))
        check_encoding(e)

    def test_map_keys_unique(self):
        a = EVar("a").with_type(TMap(INT, INT))
        e = EUnaryOp(UOp.AreUnique, EMapKeys(a).with_type(TBag(INT))).with_type(BOOL)
        assert valid(e, validate_model=True)
        check_encoding(e)

    def test_map_keys_distinct(self):
        a = EVar("a").with_type(TMap(INT, INT))
        e = equal(EMapKeys(a).with_type(TBag(INT)), EUnaryOp(UOp.Distinct, EMapKeys(a).with_type(TBag(INT))).with_type(TBag(INT)))
        assert valid(e, validate_model=True)
        check_encoding(e)

    def test_distinct_filter(self):
        a = EVar("a").with_type(TBag(INT))
        e = ENot(equal(EUnaryOp(UOp.Distinct, EFilter(a, mk_lambda(a.type.elem_type, lambda x: equal(x, zero)))), EEmptyList().with_type(a.type)))
        assert retypecheck(e)
        check_encoding(e)

    def test_unary_all(self):
        a = EUnaryOp(UOp.All, EVar("a").with_type(TBag(BOOL)))
        assert retypecheck(a)
        check_encoding(a)

    def test_unary_any(self):
        a = EUnaryOp(UOp.Any, EVar("a").with_type(TBag(BOOL)))
        assert retypecheck(a)
        check_encoding(a)

    def test_symbolic_enum_left(self):
        ETRUE = TEnum(("A", "B"))
        x = EVar("x").with_type(ETRUE)
        e = equal(x, EEnumEntry("B").with_type(ETRUE))
        check_encoding(e)

    def test_symbolic_enum_right(self):
        ETRUE = TEnum(("A", "B"))
        x = EVar("x").with_type(ETRUE)
        e = equal(EEnumEntry("B").with_type(ETRUE), x)
        check_encoding(e)

    def test_enum_order(self):
        ETRUE = TEnum(("B", "A"))
        x = EVar("x").with_type(ETRUE)
        y = EVar("y").with_type(ETRUE)
        check_encoding(EBinOp(x, "<", y).with_type(BOOL))

    def test_bag_deep_equals(self):
        x = EVar("x").with_type(INT_BAG)
        y = EVar("y").with_type(INT_BAG)
        assert satisfiable(EAll((
            EEq(x, y),
            ENot(EBinOp(x, "===", y).with_type(BOOL)))), collection_depth=3, validate_model=True)

    def test_useless_let(self):
        e = ELet(EVar("x"), ELambda(EVar("y"), ETRUE))
        assert retypecheck(e, env={"x": INT})
        assert satisfiable(e, validate_model=True)

    def test_deep_eq(self):
        xs = EVar("xs").with_type(INT_BAG)
        ys = EVar("ys").with_type(INT_BAG)
        zs = EVar("zs").with_type(INT_BAG)
        x = EVar("x").with_type(INT)
        e = EMap(ESingleton(EMapKeys(EMakeMap2(xs, ELambda(x, ETRUE)))), ELambda(zs, EDeepEq(zs, ys)))
        formula = EAll([
            EEq(e, ESingleton(ETRUE)),
            ENot(EDeepEq(xs, ys))])
        assert retypecheck(formula)
        print(satisfy(formula, validate_model=True))

    def test_regression6(self):
        satisfy(EBinOp(EMakeMap2(EMap(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var44268').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EGetField(EGetField(EVar('_var44268').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'key').with_type(TNative('uint64_t')))).with_type(TBag(TNative('uint64_t'))), ELambda(EVar('_var44256').with_type(TNative('uint64_t')), EFilter(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var44268').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EBinOp(EGetField(EGetField(EVar('_var44268').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'key').with_type(TNative('uint64_t')), '==', EVar('_var44256').with_type(TNative('uint64_t'))).with_type(TBool()))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))))).with_type(TMap(TNative('uint64_t'), TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))))), '==', EMakeMap2(ESingleton(EVar('_var44256').with_type(TNative('uint64_t'))).with_type(TBag(TNative('uint64_t'))), ELambda(EVar('_var44256').with_type(TNative('uint64_t')), EEmptyList().with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))))).with_type(TMap(TNative('uint64_t'), TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))))).with_type(TBool()), vars=OrderedSet([EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), EVar('_var44256').with_type(TNative('uint64_t'))]), collection_depth=2, validate_model=True)

    def test_regression7(self):
        satisfy(EBinOp(EMakeMap2(EMap(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var44268').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EGetField(EGetField(EVar('_var44268').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'key').with_type(TNative('uint64_t')))).with_type(TBag(TNative('uint64_t'))), ELambda(EVar('_var44256').with_type(TNative('uint64_t')), EFilter(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var44268').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EBinOp(EGetField(EGetField(EVar('_var44268').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'key').with_type(TNative('uint64_t')), '==', EVar('_var44256').with_type(TNative('uint64_t'))).with_type(TBool()))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))))).with_type(TMap(TNative('uint64_t'), TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))))), 'in', ESingleton(EMakeMap2(ESingleton(EVar('_var44256').with_type(TNative('uint64_t'))).with_type(TBag(TNative('uint64_t'))), ELambda(EVar('_var44256').with_type(TNative('uint64_t')), EEmptyList().with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))))).with_type(TMap(TNative('uint64_t'), TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))))).with_type(TBag(TMap(TNative('uint64_t'), TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))))))).with_type(TBool()), vars=OrderedSet([EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), EVar('_var44256').with_type(TNative('uint64_t'))]), collection_depth=2, validate_model=True)

    def test_regression8(self):
        satisfy(EBinOp(EUnaryOp('not', EBinOp(EVar('_var15871').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), '==', EVar('_var15872').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TBool())).with_type(TBool()), 'and', ELet(EMakeMap2(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var1315').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EMakeMap2(EFilter(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var1314').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EBinOp(EGetField(EGetField(EVar('_var1315').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('Disk').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var1314').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EGetField(EGetField(EVar('_var1314').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), ELambda(EVar('_var15873').with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), EUnaryOp('not', EBinOp(EMapGet(EVar('_var15873').with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), EVar('_var15871').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))), '==', EMapGet(EVar('_var15873').with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), EVar('_var15872').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))).with_type(TBool())).with_type(TBool()))).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('_var15871').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EVar('_var15872').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))))]), collection_depth=2, validate_model=True)

    def test_regression9(self):
        e = ELet(EMakeMap2(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var1315').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EMakeMap2(EFilter(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var1314').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EBinOp(EGetField(EGetField(EVar('_var1315').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('Disk').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var1314').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EGetField(EGetField(EVar('_var1314').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), ELambda(EVar('_var15873').with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), EUnaryOp('not', EBinOp(EMapGet(EVar('_var15873').with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), EVar('_var15871').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))), '==', EMapGet(EVar('_var15873').with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), EVar('_var15872').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))).with_type(TBool())).with_type(TBool()))).with_type(TBool())
        satisfy(e, collection_depth=2, validate_model=True)

    def test_regression10(self):
        e = ELet(EMakeMap2(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var1315').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EMakeMap2(EFilter(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var1314').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EBinOp(EGetField(EGetField(EVar('_var1315').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('Disk').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var1314').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EGetField(EGetField(EVar('_var1314').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), ELambda(EVar('_var15873').with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), EUnaryOp('not', EBinOp(EMapGet(EVar('_var15873').with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), EVar('_var15871').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))), '==', EMapGet(EVar('_var15873').with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))), EVar('_var15872').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TMap(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))))).with_type(TBool())).with_type(TBool()))).with_type(TBool())
        satisfy(e.body_function.apply_to(e.e), collection_depth=2, validate_model=True)

    def test_regression11(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))), ELambda(EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'val').with_type(TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))), 'username').with_type(TString()))).with_type(TBag(TString()))).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EMap(EVar('rosterItems').with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))))), ELambda(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), EGetField(EGetField(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'backendId').with_type(TLong()))).with_type(TBag(TLong()))).with_type(TBool()), 'and', EUnaryOp('unique', EMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'name').with_type(TString()))).with_type(TBag(TString()))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('empty', EFilter(EVar('childGroups').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))), ELambda(EVar('child').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), EUnaryOp('not', EBinOp(EGetField(EGetField(ETupleGet(EVar('child').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), 0).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('ONLY_GROUP').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))))).with_type(TBool()), 'and', EBinOp(EUnaryOp('empty', EFilter(EVar('childGroups').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))), ELambda(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), EBinOp(EUnaryOp('not', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), 0).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('not', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), 1).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))))).with_type(TBool()), 'and', EUnaryOp('empty', EFilter(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), ELambda(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), EBinOp(EUnaryOp('not', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 0).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('not', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 1).with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('empty', EFilter(EVar('admins').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), ELambda(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), EBinOp(EUnaryOp('not', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 0).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('not', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 1).with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('childGroups').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('admins').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TBool()), 'and', EUnaryOp('any', EMap(EFilter(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))), ELambda(EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), EBinOp(EBinOp(EUnaryOp('not', EBinOp(EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), '==', EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('exists', EFilter(EVar('rosterItems').with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))))), ELambda(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), EBinOp(EBinOp(ECall('jidToUsername', (EGetField(EGetField(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'target').with_type(TNative('org.xmpp.packet.JID')),)).with_type(TString()), '==', EGetField(EGetField(EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'val').with_type(TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))), 'username').with_type(TString())).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'val').with_type(TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))), 'username').with_type(TString()), '==', EGetField(EGetField(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'user').with_type(TString())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))))).with_type(TBool()), 'or', EUnaryOp('exists', EMap(EFilter(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 'in', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('ONLY_GROUP').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'and', EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 'in', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('ONLY_GROUP').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'and', EUnaryOp('exists', EFilter(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('subg').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('subg').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), 'in', EVar('childGroups').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))))).with_type(TBool()), 'and', EUnaryOp('exists', EFilter(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), ELambda(EVar('t').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), EBinOp(EBinOp(ETupleGet(EVar('t').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 0).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), '==', EVar('subg').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBool()), 'and', EBinOp(ETupleGet(EVar('t').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 1).with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), '==', EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'name').with_type(TString()))).with_type(TBag(TString()))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EUnaryOp('not', EBinOp(EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), '==', EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('exists', EFilter(EVar('rosterItems').with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))))), ELambda(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), EBinOp(EBinOp(ECall('jidToUsername', (EGetField(EGetField(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'target').with_type(TNative('org.xmpp.packet.JID')),)).with_type(TString()), '==', EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'val').with_type(TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))), 'username').with_type(TString())).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'val').with_type(TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))), 'username').with_type(TString()), '==', EGetField(EGetField(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'user').with_type(TString())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))))).with_type(TBool()), 'or', EUnaryOp('exists', EMap(EFilter(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 'in', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('ONLY_GROUP').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'and', EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 'in', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('ONLY_GROUP').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'and', EUnaryOp('exists', EFilter(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('subg').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('subg').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), 'in', EVar('childGroups').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))))).with_type(TBool()), 'and', EUnaryOp('exists', EFilter(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), ELambda(EVar('t').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), EBinOp(EBinOp(ETupleGet(EVar('t').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 0).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), '==', EVar('subg').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBool()), 'and', EBinOp(ETupleGet(EVar('t').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 1).with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), '==', EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'name').with_type(TString()))).with_type(TBag(TString()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))), ELambda(EVar('_fragarg').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), EBinOp(EVar('_fragarg').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), '===', EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EUnaryOp('len', EFilter(EVar('rosterItems').with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))))), ELambda(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), EBinOp(EBinOp(ECall('jidToUsername', (EGetField(EGetField(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'target').with_type(TNative('org.xmpp.packet.JID')),)).with_type(TString()), '==', EGetField(EGetField(EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'val').with_type(TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))), 'username').with_type(TString())).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'val').with_type(TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))), 'username').with_type(TString()), '==', EGetField(EGetField(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'user').with_type(TString())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))))).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool())).with_type(TBool()), 'and', EUnaryOp('not', EUnaryOp('empty', EFilter(EVar('rosterItems').with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))))), ELambda(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), EBinOp(EBinOp(ECall('jidToUsername', (EGetField(EGetField(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'target').with_type(TNative('org.xmpp.packet.JID')),)).with_type(TString()), '==', EGetField(EGetField(EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'val').with_type(TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))), 'username').with_type(TString())).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'val').with_type(TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))), 'username').with_type(TString()), '==', EGetField(EGetField(EVar('i').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'user').with_type(TString())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))), EVar('rosterItems').with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))))), EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), EVar('childGroups').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))), EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), EVar('admins').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), EVar('other').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))]), collection_depth=2, validate_model=True)

    def test_regression12(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))), ELambda(EVar('_var28803386').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), EGetField(EGetField(EVar('_var28803386').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'val').with_type(TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))), 'username').with_type(TString()))).with_type(TBag(TString()))).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EMap(EVar('rosterItems').with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))))), ELambda(EVar('_var28803404').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), EGetField(EGetField(EVar('_var28803404').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'backendId').with_type(TLong()))).with_type(TBag(TLong()))).with_type(TBool()), 'and', EUnaryOp('unique', EMap(EVar('rosterItems').with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))))), ELambda(EVar('_var28803404').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), ETuple((EGetField(EGetField(EVar('_var28803404').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'user').with_type(TString()), ECall('jidToUsername', (EGetField(EGetField(EVar('_var28803404').with_type(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType')))))), 'val').with_type(TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))), 'target').with_type(TNative('org.xmpp.packet.JID')),)).with_type(TString()))).with_type(TTuple((TString(), TString()))))).with_type(TBag(TTuple((TString(), TString()))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var28803469').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EGetField(EGetField(EVar('_var28803469').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'name').with_type(TString()))).with_type(TBag(TString()))).with_type(TBool()), 'and', EUnaryOp('empty', EFilter(EVar('childGroups').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))), ELambda(EVar('_var28803487').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), EUnaryOp('not', EBinOp(EGetField(EGetField(ETupleGet(EVar('_var28803487').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), 0).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('ONLY_GROUP').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('empty', EFilter(EVar('childGroups').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))), ELambda(EVar('_var28803487').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), EBinOp(EUnaryOp('not', EBinOp(ETupleGet(EVar('_var28803487').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), 0).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('not', EBinOp(ETupleGet(EVar('_var28803487').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), 1).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))))).with_type(TBool()), 'and', EUnaryOp('empty', EFilter(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), ELambda(EVar('_var28803539').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), EBinOp(EUnaryOp('not', EBinOp(ETupleGet(EVar('_var28803539').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 0).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('not', EBinOp(ETupleGet(EVar('_var28803539').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 1).with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('empty', EFilter(EVar('admins').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), ELambda(EVar('_var28803539').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), EBinOp(EUnaryOp('not', EBinOp(ETupleGet(EVar('_var28803539').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 0).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('not', EBinOp(ETupleGet(EVar('_var28803539').with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 1).with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('childGroups').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('unique', EVar('admins').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool()), 'and', EBinOp(EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TBool()), 'and', EUnaryOp('not', EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))), 'in', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('unique', EBinOp(EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), '+', ESingleton(ETuple((EMapGet(EStateVar(EMakeMap2(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var28803469').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('_var28803469').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TMap(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TMap(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), EVar('_var28803469').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('users').with_type(TBag(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))), EVar('rosterItems').with_type(TBag(THandle('RosterItem', TRecord((('backendId', TLong()), ('user', TString()), ('target', TNative('org.xmpp.packet.JID')), ('nickname', TString()), ('askStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.AskType')), ('recvStatus', TNative('org.jivesoftware.openfire.roster.RosterItem.RecvType'))))))), EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), EVar('childGroups').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))), EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), EVar('admins').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date'))))))))), EVar('g').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u').with_type(THandle('User', TRecord((('username', TString()), ('salt', TString()), ('storedKey', TString()), ('serverKey', TString()), ('iterations', TInt()), ('name', TString()), ('email', TString()), ('creationDate', TNative('java.util.Date')), ('modificationDate', TNative('java.util.Date')))))), EVar('_var28803469').with_type(THandle('Group', TRecord((('name', TString()), ('displayName', TString()), ('description', TString()), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))]), collection_depth=2, validate_model=True)

    def test_regression14(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EBinOp(EUnaryOp('unique', EVar('conns').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_time', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('GetConnectionCallback')))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('_var685').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('_var690').with_type(TBag(THandle('Request', TRecord((('rq_time', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('GetConnectionCallback')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EMap(EVar('conns').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))), ELambda(EVar('_var534').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))), ECond(EBinOp(EVar('_var534').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))), '==', EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))).with_type(TBool()), EVar('_var534').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))), EVar('_var534').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))).with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))))).with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))), '==', EMap(EVar('_var685').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))), ELambda(EVar('_var534').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))), ECond(EBinOp(EVar('_var534').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))), '==', EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))).with_type(TBool()), EVar('_var534').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))), EVar('_var534').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))).with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))))).with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('conns').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))), EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_time', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('GetConnectionCallback'))))))), EVar('_var685').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))), EVar('_var690').with_type(TBag(THandle('Request', TRecord((('rq_time', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('GetConnectionCallback'))))))), EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))), EVar('newstate').with_type(TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT')))]), collection_depth=2, validate_model=True)

    def test_regression15(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EBinOp(EUnaryOp('unique', EVar('conns').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_time', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('GetConnectionCallback')))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('_var685').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('_var690').with_type(TBag(THandle('Request', TRecord((('rq_time', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('GetConnectionCallback')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EVar('conns').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))), '==', EVar('_var685').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('conns').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))), EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_time', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('GetConnectionCallback'))))))), EVar('_var685').with_type(TList(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort'))))))), EVar('_var690').with_type(TBag(THandle('Request', TRecord((('rq_time', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('GetConnectionCallback'))))))), EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')))))), EVar('newstate').with_type(TEnum(('READY', 'PROCESSING', 'DROPPED', 'CHECKED_OUT')))]), collection_depth=2, validate_model=True)

    def test_regression16(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt()))))))), ELambda(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), ETupleGet(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), 0).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('sum', EMap(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt()))))))), ELambda(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '<', ENum(50).with_type(TInt())).with_type(TBool()), 'and', EUnaryOp('unique', EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('_var860').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt()))))))), ELambda(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), ETupleGet(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), 0).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('_var860').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('sum', EMap(EVar('_var860').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt()))))))), ELambda(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '<', ENum(50).with_type(TInt())).with_type(TBool()), 'and', EUnaryOp('unique', EVar('_var860').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EBinOp(ECall('startOffset', (EVar('offsetAtt').with_type(TNative('OffsetAttribute')),)).with_type(TInt()), '>=', EArgMax(EMap(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt()))))))), ELambda(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), ECall('floatGtZero', (EGetField(ETupleGet(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), 1).with_type(TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))), 'score').with_type(TNative('Float')),)).with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt()))))))), ELambda(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), EGetField(ETupleGet(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), 1).with_type(TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))), 'endOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var550').with_type(TInt()), EVar('_var550').with_type(TInt()))).with_type(TInt())).with_type(TBool()), '==', EBinOp(ECall('startOffset', (EVar('_var861').with_type(TNative('OffsetAttribute')),)).with_type(TInt()), '>=', EArgMax(EMap(EFilter(EVar('_var860').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt()))))))), ELambda(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), ECall('floatGtZero', (EGetField(ETupleGet(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), 1).with_type(TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))), 'score').with_type(TNative('Float')),)).with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt()))))))), ELambda(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), EGetField(ETupleGet(EVar('_var563').with_type(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))))), 1).with_type(TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt())))), 'endOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var550').with_type(TInt()), EVar('_var550').with_type(TInt()))).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt()))))))), EVar('_var860').with_type(TBag(TTuple((TInt(), TRecord((('score', TNative('Float')), ('startOffset', TInt()), ('endOffset', TInt()))))))), EVar('offsetAtt').with_type(TNative('OffsetAttribute')), EVar('_var861').with_type(TNative('OffsetAttribute'))]), collection_depth=2, validate_model=True)

    def test_any_1(self):
        xs = EVar("xs").with_type(BOOL_BAG)
        e = EUnaryOp(UOp.Any, xs).with_type(BOOL)
        a = EEq(EUnaryOp(UOp.Length, xs).with_type(INT), ZERO)
        satisfy(EAll((a, e)), validate_model=True)

    def test_bag_subtraction1(self):
        xs = EVar("xs").with_type(TBag(INT))
        e = equal(EBinOp(xs, "-", xs), EEmptyList().with_type(xs.type))
        assert retypecheck(e)
        assert valid(e)

    def test_bag_subtraction2(self):
        xs = EVar("xs").with_type(TBag(INT))
        foo = EVar("foo").with_type(INT)
        e = equal(EBinOp(xs, "-", ESingleton(foo)), EEmptyList().with_type(xs.type))
        assert retypecheck(e)
        assert not valid(e, collection_depth=2)

    def test_str_literal_cmp(self):
        v = EVar("s").with_type(STRING)
        s = EStr("").with_type(STRING)
        assert not satisfiable(EBinOp(v, "<", s).with_type(BOOL))
        for op in ("==", "<=", ">", ">="):
            e = EBinOp(v, op, s).with_type(BOOL)
            model = satisfy(e)
            assert model is not None
            assert {
                "==": model[v.id] == s.val,
                ">" : model[v.id] >  s.val,
                ">=": model[v.id] >= s.val,
                "<" : model[v.id] <  s.val,
                "<=": model[v.id] <= s.val,
                }[op], "{} {} {}".format(repr(model[v.id]), op, repr(s.val))

    def test_map_default_value(self):
        xs = EVar("xs").with_type(TBag(INT))
        x = EVar("x").with_type(INT)
        m = EMakeMap2(xs, mk_lambda(INT, lambda y: y))
        e = EAll([
            equal(x, EMapGet(EMakeMap2(EEmptyList().with_type(xs.type), mk_lambda(INT, lambda y: y)), x)),
            EBinOp(x, BOp.In, xs),
            EBinOp(x, BOp.In, EMapKeys(m)),
            ])
        assert retypecheck(e)
        model = satisfy(e, validate_model=True)
        assert model

    def test_function_extraction01(self):
        x = EVar("x").with_type(INT)
        e = EEq(ECall("f", (x,)).with_type(INT), ZERO)
        model = satisfy(e)
        assert model
        assert model["f"](model["x"]) == 0

    def test_function_extraction02(self):
        x = EVar("x").with_type(TNative("Foo"))
        e = ECall("f", (x,)).with_type(TBool())
        model = satisfy(e)
        assert "x" in model
        assert "f" in model
        assert model["f"](model["x"]) is True

    def test_function_extraction03(self):
        x = EVar("x").with_type(TNative("Foo"))
        model = satisfy(EEq(x, x), funcs={ "f": TFunc((x.type,), BOOL) })
        assert "x" in model
        assert "f" in model
        assert model["f"](model["x"]) in (True, False)

    def test_function_extraction04(self):
        x = EVar("x").with_type(TNative("Foo"))
        model = satisfy(EEq(x, x), funcs={ "f": TFunc((), BOOL) })
        assert "x" in model
        assert "f" in model
        assert model["f"]() in (True, False)

    def test_function_extraction05(self):
        x = EVar("x").with_type(TNative("Foo"))
        e = ECall("f", ()).with_type(x.type)
        model = satisfy(EEq(x, e))
        assert "x" in model
        assert "f" in model
        assert model["f"](model["x"]) == model["x"]

    def test_argmin1(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBool(True).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EBinOp(EArgMin(EBinOp(EVar('xs').with_type(TBag(TInt())), '+', ESingleton(EVar('i').with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var148').with_type(TInt()), EVar('_var148').with_type(TInt()))).with_type(TInt()), '+', EUnaryOp('-', EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var148').with_type(TInt()), EVar('_var148').with_type(TInt()))).with_type(TInt())).with_type(TInt())).with_type(TInt()), '==', EBinOp(EArgMin(EBinOp(EVar('_var164').with_type(TBag(TInt())), '+', ESingleton(EVar('i').with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var148').with_type(TInt()), EVar('_var148').with_type(TInt()))).with_type(TInt()), '+', EUnaryOp('-', EArgMin(EVar('_var164').with_type(TBag(TInt())), ELambda(EVar('_var148').with_type(TInt()), EVar('_var148').with_type(TInt()))).with_type(TInt())).with_type(TInt())).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('xs').with_type(TBag(TInt())), EVar('i').with_type(TInt()), EVar('_var164').with_type(TBag(TInt()))]), collection_depth=2, validate_model=True)

    def test_argmin2(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBool(True).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EUnaryOp('not', EBinOp(EVar('_var70138').with_type(TInt()), 'in', EMapGet(EStateVar(EMakeMap2(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var41073').with_type(TInt()), ESingleton(EVar('_var41073').with_type(TInt())).with_type(TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt()))), EVar('i').with_type(TInt())).with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EVar('_var70138').with_type(TInt()), 'in', EMapGet(EStateVar(EMakeMap2(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var41074').with_type(TInt()), ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var41073').with_type(TInt()), EVar('_var41074').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt()))), EVar('_var41073').with_type(TInt())).with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('_var70138').with_type(TInt()), EVar('xs').with_type(TBag(TInt())), EVar('i').with_type(TInt()), EVar('_var41073').with_type(TInt())]), collection_depth=2, validate_model=True)

    def test_argmin3(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBool(True).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EUnaryOp('not', EBinOp(EVar('_var157969').with_type(TInt()), 'in', EMapGet(EStateVar(EMakeMap2(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var29812').with_type(TInt()), ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var29811').with_type(TInt()), EVar('_var29812').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt()))), EVar('_var29811').with_type(TInt())).with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EVar('_var157969').with_type(TInt()), 'in', EMapGet(EStateVar(EMakeMap2(ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var29811').with_type(TInt()), EVar('_var29811').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())), ELambda(EVar('_var29812').with_type(TInt()), ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var29811').with_type(TInt()), EVar('_var29812').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt()))), EVar('_var29811').with_type(TInt())).with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('_var157969').with_type(TInt()), EVar('xs').with_type(TBag(TInt())), EVar('_var29811').with_type(TInt())]), collection_depth=2, validate_model=True)

    def test_argmin4(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBool(True).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EUnaryOp('not', EBinOp(EVar('_var172384').with_type(TInt()), 'in', EMapGet(EStateVar(EMakeMap2(ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var9300').with_type(TInt()), EVar('_var9300').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())), ELambda(EVar('_var9301').with_type(TInt()), ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var9300').with_type(TInt()), EVar('_var9301').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt()))), EVar('_var9300').with_type(TInt())).with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EVar('_var172384').with_type(TInt()), 'in', ECond(EBinOp(EVar('i').with_type(TInt()), '>', EArgMin(EMapGet(EStateVar(EMakeMap2(ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var9300').with_type(TInt()), EVar('_var9300').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())), ELambda(EVar('_var9301').with_type(TInt()), ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var9300').with_type(TInt()), EVar('_var9301').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt()))), EVar('_var9300').with_type(TInt())).with_type(TBag(TInt())), ELambda(EVar('_var9300').with_type(TInt()), EVar('_var9300').with_type(TInt()))).with_type(TInt())).with_type(TBool()), ESingleton(EArgMin(EMapGet(EStateVar(EMakeMap2(ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var9300').with_type(TInt()), EVar('_var9300').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())), ELambda(EVar('_var9301').with_type(TInt()), ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var9300').with_type(TInt()), EVar('_var9301').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt())))).with_type(TMap(TInt(), TBag(TInt()))), EVar('_var9300').with_type(TInt())).with_type(TBag(TInt())), ELambda(EVar('_var9300').with_type(TInt()), EVar('_var9300').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())), ESingleton(EVar('i').with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('_var172384').with_type(TInt()), EVar('xs').with_type(TBag(TInt())), EVar('_var9300').with_type(TInt()), EVar('i').with_type(TInt())]), collection_depth=2, validate_model=True)

    def test_argmin5(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBool(True).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EUnaryOp('not', EBinOp(EVar('_var16748').with_type(TInt()), 'in', EStateVar(ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var1021').with_type(TInt()), EVar('_var1021').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EVar('_var16748').with_type(TInt()), 'in', EVar('xs').with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('_var16748').with_type(TInt()), EVar('xs').with_type(TBag(TInt()))]), collection_depth=2, validate_model=True)

    def test_argmin6(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EBinOp(EUnaryOp('sum', EMap(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var32').with_type(TInt()), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '>=', ENum(2).with_type(TInt())).with_type(TBool()), 'and', EBinOp(EUnaryOp('sum', EMap(EVar('_var66').with_type(TBag(TInt())), ELambda(EVar('_var32').with_type(TInt()), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '>=', ENum(2).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EArgMin(EBinOp(EVar('xs').with_type(TBag(TInt())), '-', ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var32').with_type(TInt()), EVar('_var32').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var32').with_type(TInt()), EVar('_var32').with_type(TInt()))).with_type(TInt()), '==', EArgMin(EBinOp(EVar('_var66').with_type(TBag(TInt())), '-', ESingleton(EArgMin(EVar('_var66').with_type(TBag(TInt())), ELambda(EVar('_var32').with_type(TInt()), EVar('_var32').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var32').with_type(TInt()), EVar('_var32').with_type(TInt()))).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('xs').with_type(TBag(TInt())), EVar('_var66').with_type(TBag(TInt()))]), collection_depth=2, validate_model=True)

    def test_argmin7(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EUnaryOp('sum', EMap(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var35').with_type(TInt()), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '>=', ENum(2).with_type(TInt())).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EUnaryOp('not', EBinOp(EVar('_var616').with_type(TInt()), 'in', EBinOp(EBinOp(EVar('xs').with_type(TBag(TInt())), '-', ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var35').with_type(TInt()), EVar('_var35').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt())), '-', ESingleton(EArgMin(EBinOp(EVar('xs').with_type(TBag(TInt())), '-', ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var35').with_type(TInt()), EVar('_var35').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var35').with_type(TInt()), EVar('_var35').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EVar('_var616').with_type(TInt()), 'in', EBinOp(ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var35').with_type(TInt()), EVar('_var35').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())), '-', ESingleton(EArgMin(ESingleton(EArgMin(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var35').with_type(TInt()), EVar('_var35').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())), ELambda(EVar('_var35').with_type(TInt()), EVar('_var35').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('xs').with_type(TBag(TInt())), EVar('_var616').with_type(TInt())]), collection_depth=2, validate_model=True)

    def test_minheap(self):
        e = EVar("h").with_type(TMinHeap(BOOL, INT))
        check_encoding(e, require=EGt(ELen(EHeapElems(e).with_type(BOOL_BAG)), TWO))

    def test_maxheap(self):
        e = EVar("h").with_type(TMaxHeap(BOOL, INT))
        check_encoding(e, require=EGt(ELen(EHeapElems(e).with_type(BOOL_BAG)), TWO))

    def test_lists1(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBool(True).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EVar('l').with_type(TList(TNative('Object'))), '==', EDropFront(EBinOp(EVar('l').with_type(TList(TNative('Object'))), '+', ESingleton(EListGet(EVar('l').with_type(TList(TNative('Object'))), ENum(0).with_type(TInt())).with_type(TNative('Object'))).with_type(TList(TNative('Object')))).with_type(TList(TNative('Object')))).with_type(TList(TNative('Object')))).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('l').with_type(TList(TNative('Object')))]), collection_depth=2, validate_model=True)

    def test_lists2(self):
        xs = EVar("xs").with_type(TList(INT))
        e = ENot(EEq(xs, xs))
        assert not satisfiable(e, collection_depth=2, validate_model=True)

    def test_lists3(self):
        xs = EVar("xs").with_type(TList(INT))
        ys = EVar("ys").with_type(TList(INT))
        e = EAll([EEq(xs, ys), EUnaryOp(UOp.Exists, xs).with_type(BOOL)])
        check_encoding(e, collection_depth=2)

    def test_lists4(self):
        xs = EVar("xs").with_type(TList(INT))
        e = EEq(xs, EDropFront(xs).with_type(xs.type))
        check_encoding(e, collection_depth=2)

    def test_lists5(self):
        xs = EVar("xs").with_type(TList(INT))
        e = EAll([
            EUnaryOp(UOp.Empty, EDropFront(xs).with_type(xs.type)).with_type(BOOL),
            EUnaryOp(UOp.Exists, xs).with_type(BOOL)])
        check_encoding(e, collection_depth=2)

    def test_listget_performance(self):
        a = EVar("a").with_type(TList(TString()))
        b = EVar("b").with_type(a.type)
        i = EVar("i").with_type(INT)
        f = EEq(EListGet(a, i).with_type(a.type.elem_type), EListGet(b, i).with_type(a.type.elem_type))
        for d in range(0, 6):
            d = 2**d
            print("depth={}...".format(d))
            m = satisfy(f, collection_depth=d, validate_model=True)
            print(m)
            assert m is not None

    def test_listget_regression1(self):
        satisfy(EUnaryOp('not', EBinOp(EBinOp(EBinOp(EVar('isDropped').with_type(TBool()), '=>', EBinOp(EBinOp(EVar('dropped').with_type(TInt()), '>=', ENum(0).with_type(TInt())).with_type(TBool()), 'and', EBinOp(EVar('dropped').with_type(TInt()), '<', EUnaryOp('len', EVar('xs').with_type(TList(TFloat()))).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EUnaryOp('exists', EVar('xs').with_type(TList(TFloat()))).with_type(TBool())).with_type(TBool()), '=>', EBinOp(EUnaryOp('the', ECond(EStateVar(EVar('isDropped').with_type(TBool())).with_type(TBool()), EBinOp(EStateVar(EFilter(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '<', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat()))).with_type(TList(TFloat())), '-', ESingleton(EStateVar(EListGet(EVar('xs').with_type(TList(TFloat())), EVar('dropped').with_type(TInt())).with_type(TFloat())).with_type(TFloat())).with_type(TList(TFloat()))).with_type(TList(TFloat())), EStateVar(EFilter(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '<', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat()))).with_type(TList(TFloat()))).with_type(TList(TFloat()))).with_type(TFloat()), '==', ECond(EStateVar(EVar('isDropped').with_type(TBool())).with_type(TBool()), ECond(EBinOp(EStateVar(EUnaryOp('the', EFilter(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '<', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat()))).with_type(TFloat())).with_type(TFloat()), '==', EStateVar(EListGet(EVar('xs').with_type(TList(TFloat())), EVar('dropped').with_type(TInt())).with_type(TFloat())).with_type(TFloat())).with_type(TBool()), EListGet(EStateVar(EFilter(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '<', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat()))).with_type(TList(TFloat())), ENum(1).with_type(TInt())).with_type(TFloat()), EStateVar(EUnaryOp('the', EFilter(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '<', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat()))).with_type(TFloat())).with_type(TFloat())).with_type(TFloat()), EStateVar(EUnaryOp('the', EFilter(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '<', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat()))).with_type(TFloat())).with_type(TFloat())).with_type(TFloat())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('xs').with_type(TList(TFloat())), EVar('dropped').with_type(TInt()), EVar('isDropped').with_type(TBool())]), collection_depth=4, validate_model=True)

    def test_listget_regression2(self):
        satisfy(EUnaryOp('not', EBinOp(EBinOp(EBinOp(EVar('isDropped').with_type(TBool()), '=>', EBinOp(EBinOp(EVar('dropped').with_type(TInt()), '>=', ENum(0).with_type(TInt())).with_type(TBool()), 'and', EBinOp(EVar('dropped').with_type(TInt()), '<', EUnaryOp('len', EVar('xs').with_type(TList(TFloat()))).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EUnaryOp('exists', EVar('xs').with_type(TList(TFloat()))).with_type(TBool())).with_type(TBool()), '=>', EBinOp(EUnaryOp('the', EMap(EBinOp(EStateVar(ECond(EVar('isDropped').with_type(TBool()), EVar('xs').with_type(TList(TFloat())), EEmptyList().with_type(TList(TFloat()))).with_type(TList(TFloat()))).with_type(TList(TFloat())), '-', ESingleton(EStateVar(EListGet(EVar('xs').with_type(TList(TFloat())), EVar('dropped').with_type(TInt())).with_type(TFloat())).with_type(TFloat())).with_type(TList(TFloat()))).with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '+', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TFloat()))).with_type(TList(TFloat()))).with_type(TFloat()), '==', EMapGet(EStateVar(EMakeMap2(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('_key6586').with_type(TFloat()), EVar('_key6586').with_type(TFloat()))).with_type(TMap(TFloat(), TFloat()))).with_type(TMap(TFloat(), TFloat())), EUnaryOp('the', EMap(EBinOp(EStateVar(ECond(EVar('isDropped').with_type(TBool()), EVar('xs').with_type(TList(TFloat())), EEmptyList().with_type(TList(TFloat()))).with_type(TList(TFloat()))).with_type(TList(TFloat())), '-', ESingleton(EStateVar(EListGet(EVar('xs').with_type(TList(TFloat())), EVar('dropped').with_type(TInt())).with_type(TFloat())).with_type(TFloat())).with_type(TList(TFloat()))).with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '+', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TFloat()))).with_type(TList(TFloat()))).with_type(TFloat())).with_type(TFloat())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('xs').with_type(TList(TFloat())), EVar('dropped').with_type(TInt()), EVar('isDropped').with_type(TBool())]), collection_depth=4, validate_model=True)

    def test_listget_regression3(self):
        satisfy(EUnaryOp('not', EBinOp(EUnaryOp('not', EBool(True).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EVar('l').with_type(TList(TNative('Object'))), '==', EDropFront(EBinOp(EVar('l').with_type(TList(TNative('Object'))), '+', ESingleton(EListGet(EVar('l').with_type(TList(TNative('Object'))), ENum(0).with_type(TInt())).with_type(TNative('Object'))).with_type(TList(TNative('Object')))).with_type(TList(TNative('Object')))).with_type(TList(TNative('Object')))).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('l').with_type(TList(TNative('Object')))]), collection_depth=2, validate_model=True)

    def test_var_under_estatevar(self):
        # wow, very tricky!
        # EStateVar(...) needs to be "separable" from the parent, so bound vars
        # get cleared.  Thus, if EStateVar(x) appears somewhere, then `x` is
        # is free, even if it appears in e.g. \x -> EStateVar(x).
        x = EVar("x").with_type(INT)
        e = EUnaryOp(UOp.Exists, EFilter(ESingleton(ONE), ELambda(x, EStateVar(EEq(x, ZERO)))))
        print(pprint(e))
        assert retypecheck(e)
        model = satisfy(e, validate_model=True)
        print(model)
        assert model is not None

    def test_regression18(self):
        satisfy(ELet(EMakeMap2(EVar('xs').with_type(TBag(THandle('ETRUE', TNative('X')))), ELambda(EVar('_var1022').with_type(THandle('ETRUE', TNative('X'))), EUnaryOp('distinct', EMap(EVar('xs').with_type(TBag(THandle('ETRUE', TNative('X')))), ELambda(EVar('_var1021').with_type(THandle('ETRUE', TNative('X'))), EGetField(EVar('_var1022').with_type(THandle('ETRUE', TNative('X'))), 'val').with_type(TNative('X')))).with_type(TBag(TNative('X')))).with_type(TBag(TNative('X'))))).with_type(TMap(THandle('ETRUE', TNative('X')), TBag(TNative('X')))), ELambda(EVar('_var4063977').with_type(TMap(THandle('ETRUE', TNative('X')), TBag(TNative('X')))), ELet(EVar('xs').with_type(TBag(THandle('ETRUE', TNative('X')))), ELambda(EVar('_var4063972').with_type(TBag(THandle('ETRUE', TNative('X')))), EUnaryOp('not', EBinOp(EUnaryOp('not', EBool(True).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('not', EBinOp(EUnaryOp('len', EFilter(EFlatMap(EVar('_var4063972').with_type(TBag(THandle('ETRUE', TNative('X')))), ELambda(EVar('_var1022').with_type(THandle('ETRUE', TNative('X'))), EMapGet(EVar('_var4063977').with_type(TMap(THandle('ETRUE', TNative('X')), TBag(TNative('X')))), EVar('_var1021').with_type(THandle('ETRUE', TNative('X')))).with_type(TBag(TNative('X'))))).with_type(TBag(TNative('X'))), ELambda(EVar('_var0').with_type(TNative('X')), EBinOp(EVar('_var0').with_type(TNative('X')), '==', EVar('_var4063963').with_type(TNative('X'))).with_type(TBool()))).with_type(TBag(TNative('X')))).with_type(TInt()), '>', EUnaryOp('len', EFilter(EUnaryOp('distinct', EMap(EVar('xs').with_type(TBag(THandle('ETRUE', TNative('X')))), ELambda(EVar('_var1021').with_type(THandle('ETRUE', TNative('X'))), EGetField(EVar('_var1021').with_type(THandle('ETRUE', TNative('X'))), 'val').with_type(TNative('X')))).with_type(TBag(TNative('X')))).with_type(TBag(TNative('X'))), ELambda(EVar('_var0').with_type(TNative('X')), EBinOp(EVar('_var0').with_type(TNative('X')), '==', EVar('_var4063963').with_type(TNative('X'))).with_type(TBool()))).with_type(TBag(TNative('X')))).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBool()))).with_type(TBool()), vars=OrderedSet([EVar('xs').with_type(TBag(THandle('ETRUE', TNative('X')))), EVar('_var1021').with_type(THandle('ETRUE', TNative('X'))), EVar('_var4063963').with_type(TNative('X'))]), collection_depth=3, validate_model=True)

    def test_floats(self):
        x = EVar("x").with_type(FLOAT)
        y = EVar("y").with_type(FLOAT)
        z = EVar("z").with_type(FLOAT)
        for op in ("+", "-", "*"):
            e = EEq(EBinOp(x, op, y).with_type(FLOAT), z)
            check_encoding(e)

    def test_float_constants(self):
        x = EVar("x").with_type(FLOAT)
        a = EVar("a").with_type(FLOAT)
        b = EVar("b").with_type(FLOAT)
        c = EVar("c").with_type(FLOAT)
        zero = ENum(0.0).with_type(FLOAT)
        one = ENum(1.0).with_type(FLOAT)
        n1 = ENum(6.0).with_type(FLOAT)
        n2 = ENum(-13685.0).with_type(FLOAT)
        e = EAll([
            EEq(EBinOp(x, "*", n1).with_type(FLOAT), n2),
            EEq(ECall("f", (EBinOp(x, "+", one).with_type(FLOAT),)).with_type(FLOAT), one),
            EEq(ECall("f", (a,)).with_type(FLOAT), zero),
            EEq(ECall("f", (b,)).with_type(FLOAT), zero),
            EEq(ECall("f", (c,)).with_type(FLOAT), zero),
            ])
        print(satisfy(e, validate_model=True))

    def test_float_constants2(self):
        check_encoding(ENum(0.2).with_type(FLOAT))

    def test_regression19(self):
        e = ELet(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_tmp1008014').with_type(TBag(THandle('H', TNative('Value')))), ELet(EMakeMap2(EMap(EVar('_tmp1008014').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var1012').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var1012').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var1009').with_type(TNative('Value')), EEmptyList().with_type(TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), ELambda(EVar('_tmp1008019').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), ELet(EFlatMap(EVar('_tmp1008014').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var1012').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var1012').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_tmp1008026').with_type(TBag(THandle('H', TNative('Value')))), ELet(EVar('_var1008010').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), ELambda(EVar('_tmp1008048').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), ELet(EVar('_tmp1008014').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var1008013').with_type(TBag(THandle('H', TNative('Value')))), ELet(EMap(EVar('_tmp1008014').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var1012').with_type(THandle('H', TNative('Value'))), EVar('_tmp1008019').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))), ELambda(EVar('_var1008012').with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))), ELet(EVar('_tmp1008019').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), ELambda(EVar('_var1008011').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), ELet(EMapKeys(EVar('_var1008011').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TBag(TNative('Value'))), ELambda(EVar('_tmp1008044').with_type(TBag(TNative('Value'))), EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EUnaryOp('unique', EVar('_tmp1008014').with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EVar('_tmp1008026').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var1012').with_type(THandle('H', TNative('Value'))), ELet(EVar('_var1012').with_type(THandle('H', TNative('Value'))), ELambda(EVar('_tmp1008029').with_type(THandle('H', TNative('Value'))), EUnaryOp('all', EMap(EVar('_tmp1008026').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var1013').with_type(THandle('H', TNative('Value'))), ELet(EVar('_var1013').with_type(THandle('H', TNative('Value'))), ELambda(EVar('_tmp1008030').with_type(THandle('H', TNative('Value'))), EBinOp(EUnaryOp('not', EBinOp(EVar('_tmp1008029').with_type(THandle('H', TNative('Value'))), '==', EVar('_tmp1008030').with_type(THandle('H', TNative('Value')))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_tmp1008029').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')), '==', EGetField(EVar('_tmp1008030').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value'))).with_type(TBool())).with_type(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('not', EBinOp(EUnaryOp('len', EFilter(EFlatMap(EVar('_tmp1008044').with_type(TBag(TNative('Value'))), ELambda(EVar('_var1009').with_type(TNative('Value')), EVar('_var1008012').with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))), ELambda(EVar('_var0').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), EBinOp(EVar('_var0').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), '==', EVar('_tmp1008048').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TBool()))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))))).with_type(TInt()), '>', EUnaryOp('len', EFilter(EFlatMap(EVar('_var1008013').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var1012').with_type(THandle('H', TNative('Value'))), EMap(EVar('_tmp1008044').with_type(TBag(TNative('Value'))), ELambda(EVar('_var1009').with_type(TNative('Value')), EMakeMap2(EEmptyList().with_type(TBag(TNative('Value'))), ELambda(EVar('_var1009').with_type(TNative('Value')), EEmptyList().with_type(TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))), ELambda(EVar('_var0').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), EBinOp(EVar('_var0').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), '==', EVar('_tmp1008048').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TBool()))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))))).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBool()))).with_type(TBool()))).with_type(TBool()))).with_type(TBool()))).with_type(TBool()))).with_type(TBool()))).with_type(TBool()))).with_type(TBool())
        satisfy(e, vars=OrderedSet([EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), EVar('_var1008010').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))]), collection_depth=3, validate_model=True)

    def test_regression20(self):
        e = EUnaryOp('not', EBinOp(EUnaryOp('not', EBinOp(EUnaryOp('unique', EVar('xs').with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var861').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var861').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var861').with_type(THandle('H', TNative('Value'))), EUnaryOp('all', EMap(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var861').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var861').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var862').with_type(THandle('H', TNative('Value'))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var861').with_type(THandle('H', TNative('Value'))), '==', EVar('_var862').with_type(THandle('H', TNative('Value')))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var861').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')), '==', EGetField(EVar('_var862').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value'))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'or', EUnaryOp('not', EBinOp(EUnaryOp('len', EFilter(EFlatMap(EMapKeys(EStateVar(EMakeMap2(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var861').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var861').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var858').with_type(TNative('Value')), EEmptyList().with_type(TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var858').with_type(TNative('Value')), EMap(EMapKeys(EStateVar(EMakeMap2(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var861').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var861').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var858').with_type(TNative('Value')), EEmptyList().with_type(TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var858').with_type(TNative('Value')), EStateVar(EMakeMap2(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var861').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var861').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var858').with_type(TNative('Value')), EEmptyList().with_type(TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))), ELambda(EVar('_var0').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), EBinOp(EVar('_var0').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), '==', EVar('_var3546165').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TBool()))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))))).with_type(TInt()), '>', EUnaryOp('len', EFilter(EFlatMap(EMapKeys(EStateVar(EMakeMap2(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var861').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var861').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var858').with_type(TNative('Value')), EEmptyList().with_type(TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var858').with_type(TNative('Value')), EMap(EMapKeys(EStateVar(EMakeMap2(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var861').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var861').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var858').with_type(TNative('Value')), EEmptyList().with_type(TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var858').with_type(TNative('Value')), EMakeMap2(EEmptyList().with_type(TBag(TNative('Value'))), ELambda(EVar('_var858').with_type(TNative('Value')), EEmptyList().with_type(TBag(THandle('H', TNative('Value')))))).with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))), ELambda(EVar('_var0').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), EBinOp(EVar('_var0').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))), '==', EVar('_var3546165').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))).with_type(TBool()))).with_type(TBag(TMap(TNative('Value'), TBag(THandle('H', TNative('Value'))))))).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        satisfy(e, vars=OrderedSet([EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), EVar('_var3546165').with_type(TMap(TNative('Value'), TBag(THandle('H', TNative('Value')))))]), collection_depth=3, validate_model=True)

    def test_incremental_solver(self):
        s = IncrementalSolver()
        e1 = EVar("x").with_type(BOOL)
        e2 = EEq(EVar("x").with_type(INT), ZERO)
        s.satisfy(e1)
        s.satisfy(e2)
        s.satisfy(e1)

    def test_regression21(self):
        e = EBinOp(EMakeMinHeap(EVar('xs'), ELambda(EVar('x'), EVar('x'))), '==', EMakeMinHeap(EBinOp(EVar('xs'), '+', ESingleton(EVar('i'))), ELambda(EVar('x'), EVar('x'))))
        assert retypecheck(e, env={"xs": TBag(TNative("elem_type")), "i": TNative("elem_type")})
        assert not satisfiable(e, validate_model=True)

    def test_regression22(self):
        e = EUnaryOp('not', EBinOp(EMapGet(EStateVar(EMakeMap2(EMap(EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))), ELambda(EVar('_var1780').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), EGetField(EGetField(EVar('_var1780').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), 'val').with_type(TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))), 'rq_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var1778').with_type(TNative('HostAndPort')), EMapGet(EMakeMap2(EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('_var944').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var944').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var943').with_type(TNative('HostAndPort')), EFilter(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('_var943').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))))).with_type(TMap(TNative('HostAndPort'), TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))), EVar('_var1778').with_type(TNative('HostAndPort'))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))))).with_type(TMap(TNative('HostAndPort'), TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))))).with_type(TMap(TNative('HostAndPort'), TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))), EVar('p').with_type(TNative('HostAndPort'))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), '===', EMapGet(EStateVar(EMakeMap2(EMap(EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))), ELambda(EVar('_var1780').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), EGetField(EGetField(EVar('_var1780').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), 'val').with_type(TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))), 'rq_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var1778').with_type(TNative('HostAndPort')), EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('_var5034').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EGetField(EGetField(EVar('_var5034').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('_var1778').with_type(TNative('HostAndPort'))).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('_var5035').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EFilter(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EGetField(EGetField(EVar('_var5035').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))))).with_type(TBag(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))))).with_type(TMap(TNative('HostAndPort'), TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))))).with_type(TMap(TNative('HostAndPort'), TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))), EVar('p').with_type(TNative('HostAndPort'))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBool())).with_type(TBool())
        assert not satisfiable(e, validate_model=True)

    def test_caching_solver(self):
        e = EEq(EVar("x").with_type(INT), EVar("y").with_type(INT))
        s = ModelCachingSolver(vars=free_vars(e), funcs=())
        assert s.satisfiable(e)
        assert s.satisfiable(e)
        assert s.calls == 2
        assert s.hits == 1

    def test_regression26(self):
        e = EMap(EVar('_tmp639').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EVar('x').with_type(TFloat()))).with_type(TList(TFloat()))
        v = fresh_var(e.type)
        check_encoding(EEq(e, v))

    def test_regression27(self):
        e = EUnaryOp('not', EBinOp(EBinOp(EUnaryOp('sum', EMap(EFilter(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '<', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat())), ELambda(EVar('_var633').with_type(TFloat()), ENum(4).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '+', ENum(4).with_type(TInt())).with_type(TInt()), '<=', EBinOp(EUnaryOp('sum', EMap(EMap(EFilter(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '<', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EVar('x').with_type(TFloat()))).with_type(TList(TFloat())), ELambda(EVar('_var634').with_type(TFloat()), ENum(4).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '+', ENum(4).with_type(TInt())).with_type(TInt())).with_type(TBool())).with_type(TBool())
        v = fresh_var(e.type)
        check_encoding(EEq(e, v))

    def test_lambdacache_type_conflict(self):
        i = IncrementalSolver(validate_model=True)
        xs = EVar("xs").with_type(INT_BAG)
        e1 = EMap(xs, ELambda(EVar("x"), EVar("x")))
        ys = EVar("ys").with_type(BOOL_BAG)
        e2 = EMap(ys, ELambda(EVar("x"), EVar("x")))
        assert retypecheck(e1)
        assert retypecheck(e2)

        for e in (e1, e2):
            v = fresh_var(e.type)
            assert i.satisfiable(EEq(e, v))

    def test_list_slice(self):
        e = EListSlice(EVar('xs').with_type(TList(TFloat())), ENum(0).with_type(TInt()), EVar('index').with_type(TInt())).with_type(TList(TFloat()))
        check_encoding(e)

    def test_regression28(self):
        satisfy(EBinOp(EBinOp(EBinOp(EVar('index').with_type(TInt()), '>=', ENum(0).with_type(TInt())).with_type(TBool()), 'and', EBinOp(EVar('index').with_type(TInt()), '<', EUnaryOp('len', EVar('xs').with_type(TList(TFloat()))).with_type(TInt())).with_type(TBool())).with_type(TBool()), 'and', EUnaryOp('not', EBinOp(EBinOp(EListSlice(EStateVar(EVar('xs').with_type(TList(TFloat()))).with_type(TList(TFloat())), ENum(0).with_type(TInt()), EVar('index').with_type(TInt())).with_type(TList(TFloat())), '+', EListSlice(EStateVar(EVar('xs').with_type(TList(TFloat()))).with_type(TList(TFloat())), EBinOp(EVar('index').with_type(TInt()), '+', ENum(1).with_type(TInt())).with_type(TInt()), EStateVar(EUnaryOp('len', EVar('xs').with_type(TList(TFloat()))).with_type(TInt())).with_type(TInt())).with_type(TList(TFloat()))).with_type(TList(TFloat())), '==', EListSlice(EStateVar(EVar('xs').with_type(TList(TFloat()))).with_type(TList(TFloat())), ENum(0).with_type(TInt()), EUnaryOp('-', ENum(1).with_type(TInt())).with_type(TInt())).with_type(TList(TFloat()))).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('xs').with_type(TList(TFloat())), EVar('index').with_type(TInt())]), collection_depth=4, validate_model=True)

    def test_heap_2ndmin(self):
        xs = EVar("xs").with_type(INT_BAG)
        x = EVar("x").with_type(xs.type.elem_type)
        f = ELambda(x, x)
        for mkh in (EMakeMinHeap, EMakeMaxHeap):
            h = mkh(xs, f)
            e = ENot(EEq(EHeapPeek(h), EHeapPeek2(h)))
            assert retypecheck(e)
            assert satisfiable(e, validate_model=True)

    def test_to_heap(self):
        for f in (EArgMin, EArgMax):
            xs = EVar("xs").with_type(INT_BAG)
            x = EVar("x").with_type(xs.type.elem_type)
            e = f(xs, ELambda(x, EUnaryOp("-", x)))
            assert retypecheck(e)
            assert valid(EEq(e, EHeapPeek(to_heap(e)).with_type(INT)))

    def test_regression29(self):
        satisfy(EUnaryOp('not', EBinOp(EBool(True).with_type(TBool()), '=>', EBinOp(EArgMax(EBinOp(ESingleton(EBinOp(EUnaryOp('sum', EMap(ECond(EBinOp(EMapGet(EMakeMap2(EMap(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '+', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TFloat()))).with_type(TList(TFloat())), ELambda(EVar('_var77592').with_type(TFloat()), EUnaryOp('len', EFilter(EMap(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '+', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TFloat()))).with_type(TList(TFloat())), ELambda(EVar('_var77593').with_type(TFloat()), EBinOp(EVar('_var77592').with_type(TFloat()), '==', EVar('_var77593').with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat()))).with_type(TInt()))).with_type(TMap(TFloat(), TInt())), ENum(1.0).with_type(TFloat())).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool()), EEmptyList().with_type(TList(TFloat())), ESingleton(ENum(1.0).with_type(TFloat())).with_type(TList(TFloat()))).with_type(TList(TFloat())), ELambda(EVar('_var2195290').with_type(TFloat()), ENum(4).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '+', ENum(4).with_type(TInt())).with_type(TInt())).with_type(TBag(TInt())), '+', ESingleton(EBinOp(EUnaryOp('sum', EMap(ECond(EBinOp(EMapGet(EMakeMap2(EMap(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '+', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TFloat()))).with_type(TList(TFloat())), ELambda(EVar('_var77592').with_type(TFloat()), EUnaryOp('len', EFilter(EMap(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('x').with_type(TFloat()), EBinOp(ECall('log', (EBinOp(ENum(1.0).with_type(TFloat()), '+', EVar('x').with_type(TFloat())).with_type(TFloat()),)).with_type(TFloat()), '+', ECall('log', (ENum(1.5).with_type(TFloat()),)).with_type(TFloat())).with_type(TFloat()))).with_type(TList(TFloat())), ELambda(EVar('_var77593').with_type(TFloat()), EBinOp(EVar('_var77592').with_type(TFloat()), '==', EVar('_var77593').with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat()))).with_type(TInt()))).with_type(TMap(TFloat(), TInt())), ENum(1.5).with_type(TFloat())).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool()), EEmptyList().with_type(TList(TFloat())), ESingleton(ENum(1.5).with_type(TFloat())).with_type(TList(TFloat()))).with_type(TList(TFloat())), ELambda(EVar('_var2195292').with_type(TFloat()), ENum(4).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '+', ENum(4).with_type(TInt())).with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt())), ELambda(EVar('x').with_type(TInt()), EVar('x').with_type(TInt()))).with_type(TInt()), '>=', EBinOp(EUnaryOp('sum', EMap(ECond(EBinOp(EMapGet(EMakeMap2(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('_var66768').with_type(TFloat()), EUnaryOp('len', EFilter(EVar('xs').with_type(TList(TFloat())), ELambda(EVar('_var66769').with_type(TFloat()), EBinOp(EVar('_var66768').with_type(TFloat()), '==', EVar('_var66769').with_type(TFloat())).with_type(TBool()))).with_type(TList(TFloat()))).with_type(TInt()))).with_type(TMap(TFloat(), TInt())), ENum(1.5).with_type(TFloat())).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool()), EEmptyList().with_type(TList(TFloat())), ESingleton(ENum(1.5).with_type(TFloat())).with_type(TList(TFloat()))).with_type(TList(TFloat())), ELambda(EVar('_var2195293').with_type(TFloat()), ENum(4).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '+', ENum(4).with_type(TInt())).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('isDropped').with_type(TBool()), EVar('dropped').with_type(TInt()), EVar('xs').with_type(TList(TFloat())), EVar('_var155564').with_type(TFloat()), EVar('_var158099').with_type(TFloat()), EVar('_var159048').with_type(TFloat()), EVar('_var160499').with_type(TFloat()), EVar('x').with_type(TFloat())]), collection_depth=4, validate_model=True)

    def test_bag_subtraction_encoding_speed(self):
        e = EBinOp(EBinOp(EUnaryOp('exists', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBool()), 'and', EBinOp(EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '!=', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EVar('now').with_type(TNative('mongo::Date_t')), '>=', EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_returned').with_type(TNative('mongo::Date_t'))).with_type(TBool()))).with_type(TList(TBool()))).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EBinOp(EBinOp(EBinOp(EMap(EVar('reqs').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), ELambda(EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), EGetField(EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), 'rq_expiration').with_type(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t'))), '+', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_next_refresh').with_type(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t'))), '+', EMap(EFilter(EMap(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('mongo::HostAndPort')))).with_type(TList(TNative('mongo::HostAndPort'))), ELambda(EVar('p').with_type(TNative('mongo::HostAndPort')), EUnaryOp('not', EBinOp(EUnaryOp('exists', EMap(EFilter(EVar('reqs').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), ELambda(EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), EBinOp(EGetField(EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), 'rq_host').with_type(TNative('mongo::HostAndPort')), '==', EVar('p').with_type(TNative('mongo::HostAndPort'))).with_type(TBool()))).with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), ELambda(EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))))).with_type(TList(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))))).with_type(TBool()), 'or', EUnaryOp('exists', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('mongo::HostAndPort')), '==', EVar('p').with_type(TNative('mongo::HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('CHECKED_OUT').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TList(TNative('mongo::HostAndPort'))), ELambda(EVar('p').with_type(TNative('mongo::HostAndPort')), ECall('after', (EArgMax(EMap(EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('mongo::HostAndPort')), '==', EVar('p').with_type(TNative('mongo::HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '!=', EEnumEntry('CHECKED_OUT').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_returned').with_type(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t'))), ELambda(EVar('x').with_type(TNative('mongo::Date_t')), EVar('x').with_type(TNative('mongo::Date_t')))).with_type(TNative('mongo::Date_t')), EVar('hostTimeout').with_type(TNative('mongo::Milliseconds')))).with_type(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t'))), '-', EBinOp(EBinOp(EMap(EVar('reqs').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), ELambda(EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), EGetField(EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), 'rq_expiration').with_type(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t'))), '+', EMap(EFilter(EBinOp(EBinOp(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), '-', ESingleton(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), '+', ESingleton(EMakeRecord((('conn_state', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))), ('conn_host', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('mongo::HostAndPort'))), ('conn_iface', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))), ('conn_next_refresh', ECall('after', (EVar('lastUsed').with_type(TNative('mongo::Date_t')), EVar('refreshRequirement').with_type(TNative('mongo::Milliseconds')))).with_type(TNative('mongo::Date_t'))), ('conn_returned', EVar('now').with_type(TNative('mongo::Date_t'))), ('conn_last_used', EVar('retId').with_type(TInt())), ('conn_dropped', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_dropped').with_type(TBool())))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('_var433').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('_var433').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('_var434').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EGetField(EVar('_var434').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_next_refresh').with_type(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t'))), '+', EMap(EFilter(EMap(EBinOp(EBinOp(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), '-', ESingleton(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), '+', ESingleton(EMakeRecord((('conn_state', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))), ('conn_host', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('mongo::HostAndPort'))), ('conn_iface', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))), ('conn_next_refresh', ECall('after', (EVar('lastUsed').with_type(TNative('mongo::Date_t')), EVar('refreshRequirement').with_type(TNative('mongo::Milliseconds')))).with_type(TNative('mongo::Date_t'))), ('conn_returned', EVar('now').with_type(TNative('mongo::Date_t'))), ('conn_last_used', EVar('retId').with_type(TInt())), ('conn_dropped', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_dropped').with_type(TBool())))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('_var435').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EGetField(EVar('_var435').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('mongo::HostAndPort')))).with_type(TList(TNative('mongo::HostAndPort'))), ELambda(EVar('p').with_type(TNative('mongo::HostAndPort')), EUnaryOp('not', EBinOp(EUnaryOp('exists', EMap(EFilter(EVar('reqs').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), ELambda(EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), EBinOp(EGetField(EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), 'rq_host').with_type(TNative('mongo::HostAndPort')), '==', EVar('p').with_type(TNative('mongo::HostAndPort'))).with_type(TBool()))).with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), ELambda(EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), EVar('r').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))))).with_type(TList(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))))).with_type(TBool()), 'or', EUnaryOp('exists', EMap(EFilter(EBinOp(EBinOp(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), '-', ESingleton(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), '+', ESingleton(EMakeRecord((('conn_state', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))), ('conn_host', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('mongo::HostAndPort'))), ('conn_iface', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))), ('conn_next_refresh', ECall('after', (EVar('lastUsed').with_type(TNative('mongo::Date_t')), EVar('refreshRequirement').with_type(TNative('mongo::Milliseconds')))).with_type(TNative('mongo::Date_t'))), ('conn_returned', EVar('now').with_type(TNative('mongo::Date_t'))), ('conn_last_used', EVar('retId').with_type(TInt())), ('conn_dropped', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_dropped').with_type(TBool())))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('_var436').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EBinOp(EGetField(EVar('_var436').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('mongo::HostAndPort')), '==', EVar('p').with_type(TNative('mongo::HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EVar('_var436').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('CHECKED_OUT').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('_var437').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('_var437').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TList(TNative('mongo::HostAndPort'))), ELambda(EVar('p').with_type(TNative('mongo::HostAndPort')), ECall('after', (EArgMax(EMap(EMap(EFilter(EBinOp(EBinOp(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), '-', ESingleton(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), '+', ESingleton(EMakeRecord((('conn_state', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))), ('conn_host', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('mongo::HostAndPort'))), ('conn_iface', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))), ('conn_next_refresh', ECall('after', (EVar('lastUsed').with_type(TNative('mongo::Date_t')), EVar('refreshRequirement').with_type(TNative('mongo::Milliseconds')))).with_type(TNative('mongo::Date_t'))), ('conn_returned', EVar('now').with_type(TNative('mongo::Date_t'))), ('conn_last_used', EVar('retId').with_type(TInt())), ('conn_dropped', EGetField(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_dropped').with_type(TBool())))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('_var438').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EBinOp(EGetField(EVar('_var438').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('mongo::HostAndPort')), '==', EVar('p').with_type(TNative('mongo::HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EVar('_var438').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '!=', EEnumEntry('CHECKED_OUT').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('_var439').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('_var439').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('_var440').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EGetField(EVar('_var440').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_returned').with_type(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t'))), ELambda(EVar('x').with_type(TNative('mongo::Date_t')), EVar('x').with_type(TNative('mongo::Date_t')))).with_type(TNative('mongo::Date_t')), EVar('hostTimeout').with_type(TNative('mongo::Milliseconds')))).with_type(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t')))).with_type(TList(TNative('mongo::Date_t')))).with_type(TInt()), '>', ENum(1).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        assert satisfiable(e, validate_model=True)

    def test_regression30(self):
        satisfy(EUnaryOp('not', EBinOp(EBool(True).with_type(TBool()), '=>', EBinOp(EBinOp(EUnaryOp('sum', EMap(EMap(EBinOp(EVar('reqs').with_type(TSet(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), '+', EVar('reqs').with_type(TSet(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))))).with_type(TSet(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), ELambda(EVar('_var7757541').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), EVar('_var7757541').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))))).with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), ELambda(EVar('_var7765571').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), ENum(12).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '+', ENum(4).with_type(TInt())).with_type(TInt()), '>=', EBinOp(EUnaryOp('sum', EMap(EBinOp(EVar('reqs').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), '+', EVar('reqs').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))))).with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), ELambda(EVar('_var7765572').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), ENum(12).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '+', ENum(4).with_type(TInt())).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), EVar('retId').with_type(TInt()), EVar('reqs').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_idleHosts').with_type(TBag(TRecord((('host_id', TNative('mongo::HostAndPort')), ('host_timeout', TNative('mongo::Date_t')))))), EVar('hostTimeout').with_type(TNative('mongo::Milliseconds')), EVar('now').with_type(TNative('mongo::Date_t')), EVar('lastUsed').with_type(TNative('mongo::Date_t')), EVar('refreshRequirement').with_type(TNative('mongo::Milliseconds')), EVar('_var134975').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EVar('_var140097').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_var142487').with_type(TBag(TRecord((('host_id', TNative('mongo::HostAndPort')), ('host_timeout', TNative('mongo::Date_t')))))), EVar('_var144896').with_type(TSet(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_var147967').with_type(TList(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))), EVar('_var151056').with_type(TList(TNative('mongo::executor::ConnectionPool::GetConnectionCallback*'))), EVar('_var154024').with_type(TList(TNative('mongo::HostAndPort'))), EVar('_var158004').with_type(TList(TBool())), EVar('_var161210').with_type(TList(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_var165082').with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EVar('_var168721').with_type(TList(TNative('mongo::Date_t'))), EVar('_var172454').with_type(TList(TRecord((('host_id', TNative('mongo::HostAndPort')), ('host_timeout', TNative('mongo::Date_t')))))), EVar('refreshTimeout').with_type(TNative('mongo::Milliseconds')), EVar('_var185962').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EVar('_var190095').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_var194791').with_type(TBag(TRecord((('host_id', TNative('mongo::HostAndPort')), ('host_timeout', TNative('mongo::Date_t')))))), EVar('_var202417').with_type(TSet(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_var38203').with_type(TNative('mongo::Milliseconds')), EVar('_var39713').with_type(TNative('mongo::HostAndPort')), EVar('_var40370').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), EVar('_var41695').with_type(TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), EVar('_var55289').with_type(TInt()), EVar('_var57710').with_type(TInt()), EVar('_var59325').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('_var61549').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), EVar('_var62456').with_type(TRecord((('host_id', TNative('mongo::HostAndPort')), ('host_timeout', TNative('mongo::Date_t'))))), EVar('_var66853').with_type(TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), EVar('_var68361').with_type(TNative('mongo::HostAndPort')), EVar('_var127106').with_type(TNative('mongo::HostAndPort')), EVar('_var129859').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), EVar('_var132639').with_type(TNative('mongo::Date_t')), EVar('_var3908034').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EVar('_var137119').with_type(TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), EVar('_var4190399').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_var4299262').with_type(TBag(TRecord((('host_id', TNative('mongo::HostAndPort')), ('host_timeout', TNative('mongo::Date_t')))))), EVar('_var4387932').with_type(TSet(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_var4483236').with_type(TList(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))), EVar('_var4569137').with_type(TList(TNative('mongo::executor::ConnectionPool::GetConnectionCallback*'))), EVar('_var4655577').with_type(TList(TNative('mongo::HostAndPort'))), EVar('_var4738746').with_type(TList(TBool())), EVar('_var4818493').with_type(TList(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_var4915478').with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EVar('_var5007032').with_type(TList(TNative('mongo::Date_t'))), EVar('_var5094414').with_type(TList(TRecord((('host_id', TNative('mongo::HostAndPort')), ('host_timeout', TNative('mongo::Date_t')))))), EVar('_var5507733').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EVar('_var5600856').with_type(TBag(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_var5792496').with_type(TSet(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))), EVar('_var206374').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('_var221798').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort'))))), EVar('_var235214').with_type(TRecord((('host_id', TNative('mongo::HostAndPort')), ('host_timeout', TNative('mongo::Date_t'))))), EVar('_var272630').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), EVar('_var297956').with_type(TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), EVar('_var319668').with_type(TNative('mongo::HostAndPort')), EVar('_var379822').with_type(TNative('mongo::Date_t')), EVar('_var401892').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('_var415046').with_type(TRecord((('rq_callback', TNative('mongo::executor::ConnectionPool::GetConnectionCallback*')), ('rq_expiration', TNative('mongo::Date_t')), ('rq_host', TNative('mongo::HostAndPort')))))]), collection_depth=4, validate_model=True)

    def test_regression31(self):
        satisfy(EUnaryOp('not', EBinOp(EBinOp(EUnaryOp('any', EMap(ESingleton(EMapKeys(ELet(EBinOp(EStateVar(EVar('lineitem').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))))).with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), '+', ESingleton(EMakeRecord((('orderkey', EVar('orderkey').with_type(TInt())), ('partkey', EVar('partkey').with_type(TInt())), ('suppkey', EVar('suppkey').with_type(TInt())), ('linenumber', EVar('linenumber').with_type(TInt())), ('quantity', EVar('quantity').with_type(TFloat())), ('extendedprice', EVar('extendedprice').with_type(TFloat())), ('discount', EVar('discount').with_type(TFloat())), ('tax', EVar('tax').with_type(TFloat())), ('returnflag', EVar('returnflag').with_type(TNative('char'))), ('linestatus', EVar('linestatus').with_type(TNative('char'))), ('shipdate', EVar('shipdate').with_type(TNative('uint64_t'))), ('commitdate', EVar('commitdate').with_type(TNative('uint64_t'))), ('receiptdate', EVar('receiptdate').with_type(TNative('uint64_t'))), ('shipinstruct', EVar('shipinstruct').with_type(TString())), ('shipmode', EVar('shipmode').with_type(TString())), ('comment', EVar('comment').with_type(TString())))).with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))).with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))))).with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), ELambda(EVar('_var162319').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EMakeMap2(EMap(EVar('_var162319').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), ELambda(EVar('l').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EGetField(EVar('l').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), 'orderkey').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var12660').with_type(TInt()), EFilter(EVar('_var162319').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), ELambda(EVar('l').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EBinOp(EGetField(EVar('l').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), 'orderkey').with_type(TInt()), '==', EVar('_var12660').with_type(TInt())).with_type(TBool()))).with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))))).with_type(TMap(TInt(), TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))))))).with_type(TMap(TInt(), TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))))).with_type(TBag(TInt()))).with_type(TBag(TBag(TInt()))), ELambda(EVar('_var5152020').with_type(TBag(TInt())), EBinOp(EVar('_var5152020').with_type(TBag(TInt())), '===', EVar('_var5121115').with_type(TBag(TInt()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('any', EMap(EMap(EVar('part').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), ELambda(EVar('p').with_type(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))), EGetField(EVar('p').with_type(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))), 'partkey').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var5152021').with_type(TInt()), EBinOp(EVar('_var5152021').with_type(TInt()), '===', EVar('_var5149317').with_type(TInt())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool()), '=>', EBinOp(EUnaryOp('len', EFilter(EVar('part').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), ELambda(EVar('p').with_type(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))), EUnaryOp('not', EBinOp(EGetField(EVar('p').with_type(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))), 'partkey').with_type(TInt()), '==', EVar('_var5149317').with_type(TInt())).with_type(TBool())).with_type(TBool()))).with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))))).with_type(TInt()), '<=', ENum(1).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('lineitem').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('orders').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('part').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), EVar('customer').with_type(TBag(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString()))))), EVar('supplier').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('partsupp').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), EVar('nation').with_type(TBag(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString()))))), EVar('region').with_type(TBag(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString()))))), EVar('orderkey').with_type(TInt()), EVar('partkey').with_type(TInt()), EVar('suppkey').with_type(TInt()), EVar('linenumber').with_type(TInt()), EVar('quantity').with_type(TFloat()), EVar('extendedprice').with_type(TFloat()), EVar('discount').with_type(TFloat()), EVar('tax').with_type(TFloat()), EVar('returnflag').with_type(TNative('char')), EVar('linestatus').with_type(TNative('char')), EVar('shipdate').with_type(TNative('uint64_t')), EVar('commitdate').with_type(TNative('uint64_t')), EVar('receiptdate').with_type(TNative('uint64_t')), EVar('shipinstruct').with_type(TString()), EVar('shipmode').with_type(TString()), EVar('comment').with_type(TString()), EVar('_var94743').with_type(TInt()), EVar('_var94744').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var324510').with_type(TInt()), EVar('_var326061').with_type(TInt()), EVar('_var327291').with_type(TInt()), EVar('_var328587').with_type(TInt()), EVar('_var328589').with_type(TInt()), EVar('ps').with_type(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString())))), EVar('c').with_type(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString())))), EVar('o').with_type(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString())))), EVar('l').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EVar('_var341305').with_type(TInt()), EVar('_var342258').with_type(TInt()), EVar('_var343603').with_type(TInt()), EVar('_var345387').with_type(TInt()), EVar('_var345393').with_type(TInt()), EVar('_var636983').with_type(TBool()), EVar('_var645476').with_type(TInt()), EVar('_var646995').with_type(TInt()), EVar('_var648950').with_type(TInt()), EVar('_var650989').with_type(TInt()), EVar('_var650994').with_type(TInt()), EVar('_var663581').with_type(TBool()), EVar('_var672686').with_type(TInt()), EVar('_var674150').with_type(TInt()), EVar('_var675932').with_type(TInt()), EVar('_var678942').with_type(TInt()), EVar('_var678947').with_type(TInt()), EVar('_var690961').with_type(TInt()), EVar('_var698879').with_type(TInt()), EVar('_var699909').with_type(TInt()), EVar('_var700994').with_type(TInt()), EVar('_var702666').with_type(TInt()), EVar('_var702674').with_type(TInt()), EVar('_var712839').with_type(TInt()), EVar('_var721047').with_type(TInt()), EVar('_var722205').with_type(TInt()), EVar('_var723369').with_type(TInt()), EVar('_var725107').with_type(TInt()), EVar('_var725109').with_type(TInt()), EVar('_var739116').with_type(TNative('char')), EVar('_var748206').with_type(TInt()), EVar('_var749743').with_type(TInt()), EVar('_var751300').with_type(TInt()), EVar('_var753701').with_type(TInt()), EVar('_var753721').with_type(TInt()), EVar('_var763920').with_type(TNative('uint64_t')), EVar('_var771820').with_type(TInt()), EVar('_var773093').with_type(TInt()), EVar('_var774655').with_type(TInt()), EVar('_var776995').with_type(TInt()), EVar('_var776997').with_type(TInt()), EVar('_var788344').with_type(TString()), EVar('_var795298').with_type(TInt()), EVar('_var796914').with_type(TInt()), EVar('_var798211').with_type(TInt()), EVar('_var800121').with_type(TInt()), EVar('_var800128').with_type(TInt()), EVar('_var810200').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EVar('_var818540').with_type(TInt()), EVar('_var820307').with_type(TInt()), EVar('_var822216').with_type(TInt()), EVar('_var824797').with_type(TInt()), EVar('_var824798').with_type(TInt()), EVar('_var835124').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var842346').with_type(TInt()), EVar('_var844361').with_type(TInt()), EVar('_var845804').with_type(TInt()), EVar('_var847673').with_type(TInt()), EVar('_var847679').with_type(TInt()), EVar('_var859014').with_type(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString())))), EVar('_var868574').with_type(TInt()), EVar('_var870517').with_type(TInt()), EVar('_var872246').with_type(TInt()), EVar('_var874637').with_type(TInt()), EVar('_var874641').with_type(TInt()), EVar('_var884066').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('_var889929').with_type(TInt()), EVar('_var891256').with_type(TInt()), EVar('_var892375').with_type(TInt()), EVar('_var893870').with_type(TInt()), EVar('_var893888').with_type(TInt()), EVar('_var902444').with_type(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))), EVar('_var910261').with_type(TInt()), EVar('_var911603').with_type(TInt()), EVar('_var913274').with_type(TInt()), EVar('_var915970').with_type(TInt()), EVar('_var915982').with_type(TInt()), EVar('_var924518').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), EVar('_var930316').with_type(TInt()), EVar('_var931875').with_type(TInt()), EVar('_var933406').with_type(TInt()), EVar('_var935078').with_type(TInt()), EVar('_var935084').with_type(TInt()), EVar('_var944623').with_type(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString())))), EVar('_var953883').with_type(TInt()), EVar('_var955777').with_type(TInt()), EVar('_var957046').with_type(TInt()), EVar('_var959442').with_type(TInt()), EVar('_var959450').with_type(TInt()), EVar('_var971150').with_type(TBag(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString()))))), EVar('_var978332').with_type(TInt()), EVar('_var979942').with_type(TInt()), EVar('_var981467').with_type(TInt()), EVar('_var983780').with_type(TInt()), EVar('_var983785').with_type(TInt()), EVar('_var995290').with_type(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString())))), EVar('_var1002778').with_type(TInt()), EVar('_var1004801').with_type(TInt()), EVar('_var1006071').with_type(TInt()), EVar('_var1008751').with_type(TInt()), EVar('_var1008755').with_type(TInt()), EVar('_var1019873').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('_var1026976').with_type(TInt()), EVar('_var1028661').with_type(TInt()), EVar('_var1030564').with_type(TInt()), EVar('_var1032710').with_type(TInt()), EVar('_var1032714').with_type(TInt()), EVar('_var1045401').with_type(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString())))), EVar('_var1053235').with_type(TInt()), EVar('_var1055085').with_type(TInt()), EVar('_var1057111').with_type(TInt()), EVar('_var1059829').with_type(TInt()), EVar('_var1059842').with_type(TInt()), EVar('_var1072127').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), EVar('_var1079643').with_type(TInt()), EVar('_var1081544').with_type(TInt()), EVar('_var1083574').with_type(TInt()), EVar('_var1085777').with_type(TInt()), EVar('_var1085784').with_type(TInt()), EVar('_var1097979').with_type(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString())))), EVar('_var1107573').with_type(TInt()), EVar('_var1109356').with_type(TInt()), EVar('_var1111864').with_type(TInt()), EVar('_var1114968').with_type(TInt()), EVar('_var1114973').with_type(TInt()), EVar('_var1127943').with_type(TBag(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString()))))), EVar('_var1135945').with_type(TInt()), EVar('_var1137909').with_type(TInt()), EVar('_var1139730').with_type(TInt()), EVar('_var1141842').with_type(TInt()), EVar('_var1141849').with_type(TInt()), EVar('_var1153151').with_type(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString())))), EVar('_var1162021').with_type(TInt()), EVar('_var1164203').with_type(TInt()), EVar('_var1166179').with_type(TInt()), EVar('_var1169271').with_type(TInt()), EVar('_var1169278').with_type(TInt()), EVar('_var1179561').with_type(TBag(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString()))))), EVar('_var1185612').with_type(TInt()), EVar('_var1186941').with_type(TInt()), EVar('_var1187930').with_type(TInt()), EVar('_var1189516').with_type(TInt()), EVar('_var1189520').with_type(TInt()), EVar('_var1196977').with_type(TBag(TInt())), EVar('_var1202074').with_type(TInt()), EVar('_var1203817').with_type(TInt()), EVar('_var1205358').with_type(TInt()), EVar('_var1206959').with_type(TInt()), EVar('_var1206964').with_type(TInt()), EVar('_var1216130').with_type(TTuple((TInt(), TInt()))), EVar('_var1222343').with_type(TInt()), EVar('_var1224326').with_type(TInt()), EVar('_var1225867').with_type(TInt()), EVar('_var1228062').with_type(TInt()), EVar('_var1228069').with_type(TInt()), EVar('_var1238494').with_type(TBag(TTuple((TInt(), TInt())))), EVar('_var1245117').with_type(TInt()), EVar('_var1246380').with_type(TInt()), EVar('_var1247582').with_type(TInt()), EVar('_var1249711').with_type(TInt()), EVar('_var1249715').with_type(TInt()), EVar('_var1259420').with_type(TBag(TFloat())), EVar('_var1266292').with_type(TInt()), EVar('_var1267997').with_type(TInt()), EVar('_var1269800').with_type(TInt()), EVar('_var1272428').with_type(TInt()), EVar('_var1272429').with_type(TInt()), EVar('_var1280043').with_type(TBag(TBool())), EVar('_var1286928').with_type(TInt()), EVar('_var1288042').with_type(TInt()), EVar('_var1289868').with_type(TInt()), EVar('_var1292733').with_type(TInt()), EVar('_var1292734').with_type(TInt()), EVar('_var1302456').with_type(TInt()), EVar('_var1310496').with_type(TInt()), EVar('_var1312956').with_type(TInt()), EVar('_var1314343').with_type(TInt()), EVar('_var1315540').with_type(TInt()), EVar('_var1315544').with_type(TInt()), EVar('_var1327390').with_type(TInt()), EVar('_var1343616').with_type(TInt()), EVar('_var1347189').with_type(TInt()), EVar('_var1349700').with_type(TInt()), EVar('_var1353629').with_type(TInt()), EVar('_var1353650').with_type(TInt()), EVar('_var1373350').with_type(TInt()), EVar('_var1386632').with_type(TInt()), EVar('_var1389334').with_type(TInt()), EVar('_var1391755').with_type(TInt()), EVar('_var1394350').with_type(TInt()), EVar('_var1394353').with_type(TInt()), EVar('_var1413033').with_type(TInt()), EVar('_var1426733').with_type(TInt()), EVar('_var1429015').with_type(TInt()), EVar('_var1432671').with_type(TInt()), EVar('_var1435973').with_type(TInt()), EVar('_var1435981').with_type(TInt()), EVar('_var1449879').with_type(TFloat()), EVar('_var1461425').with_type(TInt()), EVar('_var1463598').with_type(TInt()), EVar('_var1465725').with_type(TInt()), EVar('_var1468881').with_type(TInt()), EVar('_var1468883').with_type(TInt()), EVar('_var1483145').with_type(TFloat()), EVar('_var1495252').with_type(TInt()), EVar('_var1497646').with_type(TInt()), EVar('_var1499896').with_type(TInt()), EVar('_var1503198').with_type(TInt()), EVar('_var1503199').with_type(TInt()), EVar('_var1518347').with_type(TFloat()), EVar('_var1529081').with_type(TInt()), EVar('_var1532009').with_type(TInt()), EVar('_var1534259').with_type(TInt()), EVar('_var1537291').with_type(TInt()), EVar('_var1537306').with_type(TInt()), EVar('_var1552024').with_type(TFloat()), EVar('_var1563885').with_type(TInt()), EVar('_var1566794').with_type(TInt()), EVar('_var1569570').with_type(TInt()), EVar('_var1573629').with_type(TInt()), EVar('_var1573647').with_type(TInt()), EVar('_var1590579').with_type(TNative('char')), EVar('_var1603928').with_type(TInt()), EVar('_var1607031').with_type(TInt()), EVar('_var1609266').with_type(TInt()), EVar('_var1613070').with_type(TInt()), EVar('_var1613076').with_type(TInt()), EVar('_var1629144').with_type(TNative('char')), EVar('_var1640833').with_type(TInt()), EVar('_var1643467').with_type(TInt()), EVar('_var1645844').with_type(TInt()), EVar('_var1649672').with_type(TInt()), EVar('_var1649693').with_type(TInt()), EVar('_var1667237').with_type(TNative('uint64_t')), EVar('_var1680633').with_type(TInt()), EVar('_var1682924').with_type(TInt()), EVar('_var1686059').with_type(TInt()), EVar('_var1691861').with_type(TInt()), EVar('_var1691866').with_type(TInt()), EVar('_var1707186').with_type(TNative('uint64_t')), EVar('_var1725648').with_type(TInt()), EVar('_var1728508').with_type(TInt()), EVar('_var1731647').with_type(TInt()), EVar('_var1735980').with_type(TInt()), EVar('_var1735987').with_type(TInt()), EVar('_var1753860').with_type(TNative('uint64_t')), EVar('_var1770952').with_type(TInt()), EVar('_var1774379').with_type(TInt()), EVar('_var1777141').with_type(TInt()), EVar('_var1781480').with_type(TInt()), EVar('_var1781483').with_type(TInt()), EVar('_var1800297').with_type(TString()), EVar('_var1815070').with_type(TInt()), EVar('_var1817559').with_type(TInt()), EVar('_var1820839').with_type(TInt()), EVar('_var1825095').with_type(TInt()), EVar('_var1825096').with_type(TInt()), EVar('_var1843605').with_type(TString()), EVar('_var1858373').with_type(TInt()), EVar('_var1861213').with_type(TInt()), EVar('_var1866012').with_type(TInt()), EVar('_var1871141').with_type(TInt()), EVar('_var1871164').with_type(TInt()), EVar('_var1896311').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var1913420').with_type(TInt()), EVar('_var1918639').with_type(TInt()), EVar('_var1923478').with_type(TInt()), EVar('_var1929429').with_type(TInt()), EVar('_var1929436').with_type(TInt()), EVar('_var1958044').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), EVar('_var1984175').with_type(TInt()), EVar('_var1990617').with_type(TInt()), EVar('_var1999192').with_type(TInt()), EVar('_var2008675').with_type(TInt()), EVar('_var2008682').with_type(TInt()), EVar('_var2039680').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('_var2061001').with_type(TInt()), EVar('_var2067011').with_type(TInt()), EVar('_var2072762').with_type(TInt()), EVar('_var2081063').with_type(TInt()), EVar('_var2081069').with_type(TInt()), EVar('_var2113970').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), EVar('_var2139402').with_type(TInt()), EVar('_var2145095').with_type(TInt()), EVar('_var2151138').with_type(TInt()), EVar('_var2158772').with_type(TInt()), EVar('_var2158782').with_type(TInt()), EVar('_var2190502').with_type(TBag(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString()))))), EVar('_var2215681').with_type(TInt()), EVar('_var2222785').with_type(TInt()), EVar('_var2229109').with_type(TInt()), EVar('_var2238217').with_type(TInt()), EVar('_var2238227').with_type(TInt()), EVar('_var2271073').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('_var2296420').with_type(TInt()), EVar('_var2303933').with_type(TInt()), EVar('_var2309753').with_type(TInt()), EVar('_var2317629').with_type(TInt()), EVar('_var2317658').with_type(TInt()), EVar('_var2350084').with_type(TBag(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString()))))), EVar('_var2374729').with_type(TInt()), EVar('_var2381246').with_type(TInt()), EVar('_var2386368').with_type(TInt()), EVar('_var2396764').with_type(TInt()), EVar('_var2396785').with_type(TInt()), EVar('_var2428476').with_type(TBag(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString()))))), EVar('_var2449833').with_type(TInt()), EVar('_var2456242').with_type(TInt()), EVar('_var2463031').with_type(TInt()), EVar('_var2470922').with_type(TInt()), EVar('_var2470943').with_type(TInt()), EVar('_var2501860').with_type(TBag(TInt())), EVar('_var2530691').with_type(TInt()), EVar('_var2539023').with_type(TInt()), EVar('_var2546711').with_type(TInt()), EVar('_var2554990').with_type(TInt()), EVar('_var2554993').with_type(TInt()), EVar('_var2580673').with_type(TBag(TInt())), EVar('_var2602178').with_type(TInt()), EVar('_var2608211').with_type(TInt()), EVar('_var2615820').with_type(TInt()), EVar('_var2623394').with_type(TInt()), EVar('_var2623409').with_type(TInt()), EVar('_var2647699').with_type(TBag(TInt())), EVar('_var2668565').with_type(TInt()), EVar('_var2674321').with_type(TInt()), EVar('_var2681712').with_type(TInt()), EVar('_var2692030').with_type(TInt()), EVar('_var2692067').with_type(TInt()), EVar('_var2720124').with_type(TBag(TInt())), EVar('_var2745027').with_type(TInt()), EVar('_var2751368').with_type(TInt()), EVar('_var2759986').with_type(TInt()), EVar('_var2769639').with_type(TInt()), EVar('_var2769658').with_type(TInt()), EVar('_var2798267').with_type(TBag(TInt())), EVar('_var2823452').with_type(TInt()), EVar('_var2831420').with_type(TInt()), EVar('_var2837766').with_type(TInt()), EVar('_var2846961').with_type(TInt()), EVar('_var2846967').with_type(TInt()), EVar('_var2873296').with_type(TBag(TInt())), EVar('_var2894316').with_type(TInt()), EVar('_var2900350').with_type(TInt()), EVar('_var2906600').with_type(TInt()), EVar('_var2915304').with_type(TInt()), EVar('_var2915311').with_type(TInt()), EVar('_var2936888').with_type(TBag(TInt())), EVar('_var2959762').with_type(TInt()), EVar('_var2965702').with_type(TInt()), EVar('_var2972592').with_type(TInt()), EVar('_var2982078').with_type(TInt()), EVar('_var2982088').with_type(TInt()), EVar('_var3005806').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('_var3077621').with_type(TInt()), EVar('_var3085264').with_type(TInt()), EVar('_var3097262').with_type(TInt()), EVar('_var3097268').with_type(TInt()), EVar('_var3148831').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), EVar('_var3221604').with_type(TInt()), EVar('_var3228634').with_type(TInt()), EVar('_var3240859').with_type(TInt()), EVar('_var3240872').with_type(TInt()), EVar('_var3292402').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('_var3360559').with_type(TInt()), EVar('_var3366178').with_type(TInt()), EVar('_var3377616').with_type(TInt()), EVar('_var3377621').with_type(TInt()), EVar('_var3423224').with_type(TBool()), EVar('_var3433457').with_type(TInt()), EVar('_var3436197').with_type(TInt()), EVar('_var3440133').with_type(TInt()), EVar('_var3443938').with_type(TInt()), EVar('_var3443942').with_type(TInt()), EVar('_var3460079').with_type(TBag(TTuple((TInt(), TInt())))), EVar('_var3486148').with_type(TInt()), EVar('_var3491567').with_type(TInt()), EVar('_var3498290').with_type(TInt()), EVar('_var3507634').with_type(TInt()), EVar('_var3507662').with_type(TInt()), EVar('_var3530669').with_type(TBag(TTuple((TInt(), TInt())))), EVar('_var3556375').with_type(TInt()), EVar('_var3564964').with_type(TInt()), EVar('_var3572763').with_type(TInt()), EVar('_var3581576').with_type(TInt()), EVar('_var3581577').with_type(TInt()), EVar('_var3607197').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), EVar('_var3616794').with_type(TInt()), EVar('_var3621142').with_type(TInt()), EVar('_var3625431').with_type(TInt()), EVar('_var3648388').with_type(TMap(TInt(), TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))))), EVar('_var3687007').with_type(TInt()), EVar('_var3715683').with_type(TInt()), EVar('_var3749675').with_type(TInt()), EVar('_var3782950').with_type(TInt()), EVar('_var3782968').with_type(TInt()), EVar('_var3968049').with_type(TBag(TBool())), EVar('_var4012642').with_type(TInt()), EVar('_var4019406').with_type(TInt()), EVar('_var4027587').with_type(TInt()), EVar('_var4039642').with_type(TInt()), EVar('_var4039644').with_type(TInt()), EVar('_var4075540').with_type(TBag(TBool())), EVar('_var4110472').with_type(TInt()), EVar('_var4118999').with_type(TInt()), EVar('_var4126789').with_type(TInt()), EVar('_var4137845').with_type(TInt()), EVar('_var4137855').with_type(TInt()), EVar('_var4169354').with_type(TBag(TBool())), EVar('_var4214017').with_type(TInt()), EVar('_var4221771').with_type(TInt()), EVar('_var4230770').with_type(TInt()), EVar('_var4240596').with_type(TInt()), EVar('_var4240598').with_type(TInt()), EVar('_var4270770').with_type(TBag(TBool())), EVar('_var4317678').with_type(TInt()), EVar('_var4327470').with_type(TInt()), EVar('_var4335623').with_type(TInt()), EVar('_var4348931').with_type(TInt()), EVar('_var4348938').with_type(TInt()), EVar('_var4383096').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EVar('_var4402293').with_type(TInt()), EVar('_var4407294').with_type(TInt()), EVar('_var4410492').with_type(TInt()), EVar('_var4414544').with_type(TInt()), EVar('_var4414559').with_type(TInt()), EVar('_var4439875').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var4459495').with_type(TInt()), EVar('_var4463789').with_type(TInt()), EVar('_var4468231').with_type(TInt()), EVar('_var4473252').with_type(TInt()), EVar('_var4473262').with_type(TInt()), EVar('_var4503047').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var4532097').with_type(TInt()), EVar('_var4540058').with_type(TInt()), EVar('_var4548255').with_type(TInt()), EVar('_var4560307').with_type(TInt()), EVar('_var4560324').with_type(TInt()), EVar('_var4611416').with_type(TBag(TInt())), EVar('_var4624945').with_type(TInt()), EVar('_var4628832').with_type(TInt()), EVar('_var4633544').with_type(TInt()), EVar('_var4640031').with_type(TInt()), EVar('_var4640042').with_type(TInt()), EVar('_var4670665').with_type(TMap(TInt(), TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))))), EVar('_var4732286').with_type(TInt()), EVar('_var4775795').with_type(TInt()), EVar('_var4815338').with_type(TInt()), EVar('_var4864572').with_type(TInt()), EVar('_var4864596').with_type(TInt()), EVar('_var5121115').with_type(TBag(TInt())), EVar('_var5142333').with_type(TInt()), EVar('_var5149317').with_type(TInt())]), collection_depth=4, validate_model=True)

    def test_regression32(self):
        satisfy(EUnaryOp('not', EBinOp(EBinOp(EUnaryOp('any', EMap(ESingleton(EStateVar(EMapKeys(EMakeMap2(EMap(EVar('lineitem').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), ELambda(EVar('l2').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EGetField(EVar('l2').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), 'partkey').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var1196738').with_type(TInt()), EFilter(EVar('lineitem').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), ELambda(EVar('l2').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EBinOp(EGetField(EVar('l2').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), 'partkey').with_type(TInt()), '==', EVar('_var1196738').with_type(TInt())).with_type(TBool()))).with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))))).with_type(TMap(TInt(), TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))))).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBag(TBag(TInt()))), ELambda(EVar('_var6109451').with_type(TBag(TInt())), EBinOp(EVar('_var6109451').with_type(TBag(TInt())), '===', EVar('_var6029609').with_type(TBag(TInt()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('any', EMap(EVar('partsupp').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), ELambda(EVar('_var6109452').with_type(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString())))), EBinOp(EVar('_var6109452').with_type(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString())))), '===', EVar('ps').with_type(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool()), '=>', EBinOp(EUnaryOp('len', EFilter(EVar('part').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), ELambda(EVar('p').with_type(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))), EUnaryOp('not', EBinOp(EGetField(EVar('p').with_type(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))), 'partkey').with_type(TInt()), '==', EGetField(EVar('ps').with_type(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString())))), 'partkey').with_type(TInt())).with_type(TBool())).with_type(TBool()))).with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))))).with_type(TInt()), '<=', ENum(1).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('lineitem').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('orders').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('part').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), EVar('customer').with_type(TBag(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString()))))), EVar('supplier').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('partsupp').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), EVar('nation').with_type(TBag(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString()))))), EVar('region').with_type(TBag(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString()))))), EVar('_var1285349').with_type(TInt()), EVar('orderkey').with_type(TInt()), EVar('_var1285350').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var1465290').with_type(TInt()), EVar('_var1196738').with_type(TInt()), EVar('ps').with_type(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString())))), EVar('c').with_type(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString())))), EVar('o').with_type(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString())))), EVar('_var1518737').with_type(TInt()), EVar('_var1540845').with_type(TInt()), EVar('_var1567257').with_type(TInt()), EVar('_var1603646').with_type(TInt()), EVar('_var1651586').with_type(TInt()), EVar('_var1521791').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EVar('_var1671644').with_type(TInt()), EVar('_var1342769').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var1700235').with_type(TInt()), EVar('l2').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EVar('_var1737437').with_type(TInt()), EVar('l').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EVar('p').with_type(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))), EVar('_var1789881').with_type(TInt()), EVar('_var1797447').with_type(TInt()), EVar('_var1805055').with_type(TInt()), EVar('_var1837944').with_type(TInt()), EVar('_var1847723').with_type(TInt()), EVar('_var1853614').with_type(TInt()), EVar('_var1943958').with_type(TInt()), EVar('_var1962224').with_type(TInt()), EVar('_var1992454').with_type(TInt()), EVar('_var2032919').with_type(TInt()), EVar('_var2058721').with_type(TInt()), EVar('_var1947610').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EVar('_var2082356').with_type(TInt()), EVar('_var2870418').with_type(TBool()), EVar('_var2879243').with_type(TInt()), EVar('_var2903127').with_type(TBool()), EVar('_var2912997').with_type(TInt()), EVar('_var2933492').with_type(TInt()), EVar('_var2943748').with_type(TInt()), EVar('_var2966307').with_type(TInt()), EVar('_var2975689').with_type(TInt()), EVar('_var2996845').with_type(TNative('char')), EVar('_var3006000').with_type(TInt()), EVar('_var3029480').with_type(TNative('uint64_t')), EVar('_var3038159').with_type(TInt()), EVar('_var3061212').with_type(TString()), EVar('_var3070936').with_type(TInt()), EVar('_var3093479').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EVar('_var3107662').with_type(TInt()), EVar('_var3129690').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var3140676').with_type(TInt()), EVar('_var3162779').with_type(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString())))), EVar('_var3172436').with_type(TInt()), EVar('_var3194530').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('_var3205264').with_type(TInt()), EVar('_var3224389').with_type(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))), EVar('_var3232777').with_type(TInt()), EVar('_var3258295').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), EVar('_var3268876').with_type(TInt()), EVar('_var3288866').with_type(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString())))), EVar('_var3298589').with_type(TInt()), EVar('_var3323748').with_type(TBag(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString()))))), EVar('_var3332309').with_type(TInt()), EVar('_var3360314').with_type(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString())))), EVar('_var3368260').with_type(TInt()), EVar('_var3391426').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('_var3400410').with_type(TInt()), EVar('_var3420359').with_type(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString())))), EVar('_var3430200').with_type(TInt()), EVar('_var3451753').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), EVar('_var3462130').with_type(TInt()), EVar('_var3490847').with_type(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString())))), EVar('_var3500276').with_type(TInt()), EVar('_var3521062').with_type(TBag(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString()))))), EVar('_var3529036').with_type(TInt()), EVar('_var3549619').with_type(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString())))), EVar('_var3560284').with_type(TInt()), EVar('_var3584438').with_type(TBag(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString()))))), EVar('_var3592709').with_type(TInt()), EVar('_var3614201').with_type(TBag(TInt())), EVar('_var3623872').with_type(TInt()), EVar('_var3646252').with_type(TTuple((TInt(), TInt()))), EVar('_var3652065').with_type(TInt()), EVar('_var3676255').with_type(TBag(TTuple((TInt(), TInt())))), EVar('_var3685629').with_type(TInt()), EVar('_var3705236').with_type(TBag(TFloat())), EVar('_var3714165').with_type(TInt()), EVar('_var3741701').with_type(TBag(TBool())), EVar('_var3752715').with_type(TInt()), EVar('_var3777477').with_type(TInt()), EVar('_var3791262').with_type(TInt()), EVar('_var3817323').with_type(TInt()), EVar('_var3829592').with_type(TInt()), EVar('_var3854989').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var3866637').with_type(TInt()), EVar('_var3901469').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var3924872').with_type(TInt()), EVar('_var3972287').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('_var3992337').with_type(TInt()), EVar('_var4022840').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), EVar('_var4043454').with_type(TInt()), EVar('_var4093853').with_type(TBag(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString()))))), EVar('_var4114018').with_type(TInt()), EVar('_var4148117').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('_var4168223').with_type(TInt()), EVar('_var4208880').with_type(TBag(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString()))))), EVar('_var4227146').with_type(TInt()), EVar('_var4273310').with_type(TBag(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString()))))), EVar('_var4292879').with_type(TInt()), EVar('_var4339031').with_type(TBag(TInt())), EVar('_var4358046').with_type(TInt()), EVar('_var4413318').with_type(TBag(TInt())), EVar('_var4434741').with_type(TInt()), EVar('_var4486848').with_type(TBag(TInt())), EVar('_var4508230').with_type(TInt()), EVar('_var4566209').with_type(TBag(TInt())), EVar('_var4589112').with_type(TInt()), EVar('_var4645950').with_type(TBag(TInt())), EVar('_var4667132').with_type(TInt()), EVar('_var4720542').with_type(TBag(TInt())), EVar('_var4741122').with_type(TInt()), EVar('_var4792533').with_type(TBag(TInt())), EVar('_var4818576').with_type(TInt()), EVar('_var4872382').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var4881556').with_type(TInt()), EVar('_var4919195').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var5065837').with_type(TMap(TInt(), TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))))), EVar('_var5109541').with_type(TInt()), EVar('_var5208353').with_type(TBag(TInt())), EVar('_var5239965').with_type(TInt()), EVar('_var5294503').with_type(TBag(TTuple((TInt(), TInt())))), EVar('_var5315947').with_type(TInt()), EVar('_var5364303').with_type(TBag(TTuple((TInt(), TInt())))), EVar('_var5390609').with_type(TInt()), EVar('_var5440407').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var5449714').with_type(TInt()), EVar('_var5485129').with_type(TBag(TInt())), EVar('_var5495542').with_type(TInt()), EVar('_var5521602').with_type(TMap(TInt(), TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))))), EVar('_var5587637').with_type(TInt()), EVar('_var5771863').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), EVar('_var5799947').with_type(TInt()), EVar('_var5846727').with_type(TMap(TInt(), TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))))), EVar('_var5874766').with_type(TInt()), EVar('_var6029609').with_type(TBag(TInt())), EVar('_var6076893').with_type(TInt())]), collection_depth=4, validate_model=True)

    def test_regression33(self):
        satisfy(EUnaryOp('not', EBinOp(EBinOp(EUnaryOp('any', EMap(ESingleton(EStateVar(EMapKeys(EMakeMap2(EMap(EVar('lineitem').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), ELambda(EVar('l').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EGetField(EVar('l').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), 'orderkey').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var12660').with_type(TInt()), EEmptyList().with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))))).with_type(TMap(TInt(), TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))))).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBag(TBag(TInt()))), ELambda(EVar('_var6061079').with_type(TBag(TInt())), EBinOp(EVar('_var6061079').with_type(TBag(TInt())), '===', EVar('_var5992419').with_type(TBag(TInt()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('any', EMap(EMap(EVar('lineitem').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), ELambda(EVar('l2').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EGetField(EVar('l2').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), 'partkey').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var6061081').with_type(TInt()), EBinOp(EVar('_var6061081').with_type(TInt()), '===', EVar('_var1196738').with_type(TInt())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool()), '=>', EBinOp(EUnaryOp('len', EFilter(EVar('lineitem').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), ELambda(EVar('l2').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EUnaryOp('not', EBinOp(EGetField(EVar('l2').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), 'partkey').with_type(TInt()), '==', EVar('_var1196738').with_type(TInt())).with_type(TBool())).with_type(TBool()))).with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))))).with_type(TInt()), '<=', ENum(1).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool()), vars=OrderedSet([EVar('lineitem').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('orders').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('part').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), EVar('customer').with_type(TBag(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString()))))), EVar('supplier').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('partsupp').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), EVar('nation').with_type(TBag(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString()))))), EVar('region').with_type(TBag(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString()))))), EVar('orderkey').with_type(TInt()), EVar('partkey').with_type(TInt()), EVar('suppkey').with_type(TInt()), EVar('linenumber').with_type(TInt()), EVar('quantity').with_type(TFloat()), EVar('extendedprice').with_type(TFloat()), EVar('discount').with_type(TFloat()), EVar('tax').with_type(TFloat()), EVar('returnflag').with_type(TNative('char')), EVar('linestatus').with_type(TNative('char')), EVar('shipdate').with_type(TNative('uint64_t')), EVar('commitdate').with_type(TNative('uint64_t')), EVar('receiptdate').with_type(TNative('uint64_t')), EVar('shipinstruct').with_type(TString()), EVar('shipmode').with_type(TString()), EVar('comment').with_type(TString()), EVar('_var1222522').with_type(TInt()), EVar('_var1222523').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var1640906').with_type(TInt()), EVar('_var1642728').with_type(TInt()), EVar('_var1644438').with_type(TInt()), EVar('_var1646980').with_type(TInt()), EVar('_var1647003').with_type(TInt()), EVar('_var1196738').with_type(TInt()), EVar('ps').with_type(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString())))), EVar('c').with_type(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString())))), EVar('o').with_type(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString())))), EVar('l').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EVar('_var1677679').with_type(TInt()), EVar('_var1679277').with_type(TInt()), EVar('_var1680578').with_type(TInt()), EVar('_var1684893').with_type(TInt()), EVar('_var1684923').with_type(TInt()), EVar('_var2582811').with_type(TBool()), EVar('_var2592395').with_type(TInt()), EVar('_var2594688').with_type(TInt()), EVar('_var2597183').with_type(TInt()), EVar('_var2600698').with_type(TInt()), EVar('_var2600701').with_type(TInt()), EVar('_var2625812').with_type(TBool()), EVar('_var2634813').with_type(TInt()), EVar('_var2636412').with_type(TInt()), EVar('_var2638026').with_type(TInt()), EVar('_var2641408').with_type(TInt()), EVar('_var2641425').with_type(TInt()), EVar('_var2662098').with_type(TInt()), EVar('_var2673083').with_type(TInt()), EVar('_var2674910').with_type(TInt()), EVar('_var2677122').with_type(TInt()), EVar('_var2681705').with_type(TInt()), EVar('_var2681710').with_type(TInt()), EVar('_var2708175').with_type(TInt()), EVar('_var2719122').with_type(TInt()), EVar('_var2721499').with_type(TInt()), EVar('_var2723923').with_type(TInt()), EVar('_var2728126').with_type(TInt()), EVar('_var2728134').with_type(TInt()), EVar('_var2754944').with_type(TString()), EVar('_var2767277').with_type(TInt()), EVar('_var2769916').with_type(TInt()), EVar('_var2771962').with_type(TInt()), EVar('_var2776624').with_type(TInt()), EVar('_var2776625').with_type(TInt()), EVar('_var2800780').with_type(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))), EVar('_var2817053').with_type(TInt()), EVar('_var2820093').with_type(TInt()), EVar('_var2823454').with_type(TInt()), EVar('_var2827908').with_type(TInt()), EVar('_var2827914').with_type(TInt()), EVar('_var2853738').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var2866676').with_type(TInt()), EVar('_var2869468').with_type(TInt()), EVar('_var2872196').with_type(TInt()), EVar('_var2875125').with_type(TInt()), EVar('_var2875128').with_type(TInt()), EVar('_var2895907').with_type(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString())))), EVar('_var2908111').with_type(TInt()), EVar('_var2910612').with_type(TInt()), EVar('_var2913073').with_type(TInt()), EVar('_var2916397').with_type(TInt()), EVar('_var2916416').with_type(TInt()), EVar('_var2936837').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('_var2948748').with_type(TInt()), EVar('_var2950011').with_type(TInt()), EVar('_var2952200').with_type(TInt()), EVar('_var2955463').with_type(TInt()), EVar('_var2955479').with_type(TInt()), EVar('_var2978879').with_type(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString())))), EVar('_var2991958').with_type(TInt()), EVar('_var2994242').with_type(TInt()), EVar('_var2996462').with_type(TInt()), EVar('_var2999833').with_type(TInt()), EVar('_var2999838').with_type(TInt()), EVar('_var3024618').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), EVar('_var3034414').with_type(TInt()), EVar('_var3036428').with_type(TInt()), EVar('_var3038122').with_type(TInt()), EVar('_var3041416').with_type(TInt()), EVar('_var3041421').with_type(TInt()), EVar('_var3065652').with_type(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString())))), EVar('_var3076869').with_type(TInt()), EVar('_var3080473').with_type(TInt()), EVar('_var3083840').with_type(TInt()), EVar('_var3087993').with_type(TInt()), EVar('_var3088003').with_type(TInt()), EVar('_var3110882').with_type(TBag(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString()))))), EVar('_var3120410').with_type(TInt()), EVar('_var3122688').with_type(TInt()), EVar('_var3125289').with_type(TInt()), EVar('_var3127904').with_type(TInt()), EVar('_var3127905').with_type(TInt()), EVar('_var3150430').with_type(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString())))), EVar('_var3160336').with_type(TInt()), EVar('_var3163278').with_type(TInt()), EVar('_var3165313').with_type(TInt()), EVar('_var3168237').with_type(TInt()), EVar('_var3168240').with_type(TInt()), EVar('_var3192097').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('_var3200582').with_type(TInt()), EVar('_var3203580').with_type(TInt()), EVar('_var3206309').with_type(TInt()), EVar('_var3210111').with_type(TInt()), EVar('_var3210117').with_type(TInt()), EVar('_var3231499').with_type(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString())))), EVar('_var3243466').with_type(TInt()), EVar('_var3246039').with_type(TInt()), EVar('_var3247950').with_type(TInt()), EVar('_var3252196').with_type(TInt()), EVar('_var3252202').with_type(TInt()), EVar('_var3274677').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), EVar('_var3284808').with_type(TInt()), EVar('_var3287418').with_type(TInt()), EVar('_var3289761').with_type(TInt()), EVar('_var3293466').with_type(TInt()), EVar('_var3293475').with_type(TInt()), EVar('_var3319878').with_type(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString())))), EVar('_var3329519').with_type(TInt()), EVar('_var3331597').with_type(TInt()), EVar('_var3334168').with_type(TInt()), EVar('_var3338009').with_type(TInt()), EVar('_var3338039').with_type(TInt()), EVar('_var3362325').with_type(TBag(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString()))))), EVar('_var3370925').with_type(TInt()), EVar('_var3373235').with_type(TInt()), EVar('_var3375565').with_type(TInt()), EVar('_var3379346').with_type(TInt()), EVar('_var3379353').with_type(TInt()), EVar('_var3401447').with_type(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString())))), EVar('_var3410685').with_type(TInt()), EVar('_var3413538').with_type(TInt()), EVar('_var3416237').with_type(TInt()), EVar('_var3420115').with_type(TInt()), EVar('_var3420132').with_type(TInt()), EVar('_var3444725').with_type(TBag(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString()))))), EVar('_var3454844').with_type(TInt()), EVar('_var3457187').with_type(TInt()), EVar('_var3460634').with_type(TInt()), EVar('_var3464599').with_type(TInt()), EVar('_var3464609').with_type(TInt()), EVar('_var3491345').with_type(TBag(TInt())), EVar('_var3502496').with_type(TInt()), EVar('_var3505657').with_type(TInt()), EVar('_var3508389').with_type(TInt()), EVar('_var3511282').with_type(TInt()), EVar('_var3511286').with_type(TInt()), EVar('_var3531578').with_type(TTuple((TInt(), TInt()))), EVar('_var3544424').with_type(TInt()), EVar('_var3546785').with_type(TInt()), EVar('_var3549343').with_type(TInt()), EVar('_var3552154').with_type(TInt()), EVar('_var3552167').with_type(TInt()), EVar('_var3578319').with_type(TBag(TTuple((TInt(), TInt())))), EVar('_var3587329').with_type(TInt()), EVar('_var3589184').with_type(TInt()), EVar('_var3590988').with_type(TInt()), EVar('_var3594401').with_type(TInt()), EVar('_var3594418').with_type(TInt()), EVar('_var3617344').with_type(TBag(TFloat())), EVar('_var3629368').with_type(TInt()), EVar('_var3631541').with_type(TInt()), EVar('_var3634085').with_type(TInt()), EVar('_var3638059').with_type(TInt()), EVar('_var3638061').with_type(TInt()), EVar('_var3659612').with_type(TBag(TBool())), EVar('_var3673544').with_type(TInt()), EVar('_var3676094').with_type(TInt()), EVar('_var3677841').with_type(TInt()), EVar('_var3680557').with_type(TInt()), EVar('_var3680572').with_type(TInt()), EVar('_var3702708').with_type(TInt()), EVar('_var3713986').with_type(TInt()), EVar('_var3717589').with_type(TInt()), EVar('_var3719966').with_type(TInt()), EVar('_var3723626').with_type(TInt()), EVar('_var3723629').with_type(TInt()), EVar('_var3754113').with_type(TInt()), EVar('_var3765400').with_type(TInt()), EVar('_var3768001').with_type(TInt()), EVar('_var3770273').with_type(TInt()), EVar('_var3774202').with_type(TInt()), EVar('_var3774216').with_type(TInt()), EVar('_var3803923').with_type(TInt()), EVar('_var3815202').with_type(TInt()), EVar('_var3817434').with_type(TInt()), EVar('_var3820249').with_type(TInt()), EVar('_var3824071').with_type(TInt()), EVar('_var3824097').with_type(TInt()), EVar('_var3856383').with_type(TInt()), EVar('_var3867384').with_type(TInt()), EVar('_var3869946').with_type(TInt()), EVar('_var3872656').with_type(TInt()), EVar('_var3876127').with_type(TInt()), EVar('_var3876132').with_type(TInt()), EVar('_var3898820').with_type(TFloat()), EVar('_var3910070').with_type(TInt()), EVar('_var3913642').with_type(TInt()), EVar('_var3917044').with_type(TInt()), EVar('_var3921844').with_type(TInt()), EVar('_var3921845').with_type(TInt()), EVar('_var3945984').with_type(TNative('char')), EVar('_var3958888').with_type(TInt()), EVar('_var3961260').with_type(TInt()), EVar('_var3963643').with_type(TInt()), EVar('_var3966755').with_type(TInt()), EVar('_var3966759').with_type(TInt()), EVar('_var3989505').with_type(TNative('uint64_t')), EVar('_var4002602').with_type(TInt()), EVar('_var4005271').with_type(TInt()), EVar('_var4007361').with_type(TInt()), EVar('_var4010670').with_type(TInt()), EVar('_var4010683').with_type(TInt()), EVar('_var4034567').with_type(TString()), EVar('_var4048686').with_type(TInt()), EVar('_var4051939').with_type(TInt()), EVar('_var4054610').with_type(TInt()), EVar('_var4059247').with_type(TInt()), EVar('_var4059250').with_type(TInt()), EVar('_var4086728').with_type(TString()), EVar('_var4099219').with_type(TInt()), EVar('_var4102151').with_type(TInt()), EVar('_var4105879').with_type(TInt()), EVar('_var4110414').with_type(TInt()), EVar('_var4110424').with_type(TInt()), EVar('_var4135791').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var4149282').with_type(TInt()), EVar('_var4153167').with_type(TInt()), EVar('_var4159035').with_type(TInt()), EVar('_var4164962').with_type(TInt()), EVar('_var4164964').with_type(TInt()), EVar('_var4202816').with_type(TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString()))))), EVar('_var4226438').with_type(TInt()), EVar('_var4233533').with_type(TInt()), EVar('_var4239315').with_type(TInt()), EVar('_var4247977').with_type(TInt()), EVar('_var4248002').with_type(TInt()), EVar('_var4299165').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('_var4317152').with_type(TInt()), EVar('_var4322912').with_type(TInt()), EVar('_var4329190').with_type(TInt()), EVar('_var4337916').with_type(TInt()), EVar('_var4337934').with_type(TInt()), EVar('_var4378416').with_type(TBag(TRecord((('partkey', TInt()), ('suppkey', TInt()), ('availqty', TInt()), ('supplycost', TFloat()), ('comment', TString()))))), EVar('_var4397801').with_type(TInt()), EVar('_var4404076').with_type(TInt()), EVar('_var4411119').with_type(TInt()), EVar('_var4418189').with_type(TInt()), EVar('_var4418190').with_type(TInt()), EVar('_var4457618').with_type(TBag(TRecord((('custkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('mktsegment', TString()), ('comment', TString()))))), EVar('_var4477493').with_type(TInt()), EVar('_var4483050').with_type(TInt()), EVar('_var4488149').with_type(TInt()), EVar('_var4498115').with_type(TInt()), EVar('_var4498141').with_type(TInt()), EVar('_var4538961').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('_var4561709').with_type(TInt()), EVar('_var4568046').with_type(TInt()), EVar('_var4573654').with_type(TInt()), EVar('_var4583224').with_type(TInt()), EVar('_var4583241').with_type(TInt()), EVar('_var4626547').with_type(TBag(TRecord((('nationkey', TInt()), ('name', TString()), ('regionkey', TInt()), ('comment', TString()))))), EVar('_var4648204').with_type(TInt()), EVar('_var4652978').with_type(TInt()), EVar('_var4658394').with_type(TInt()), EVar('_var4671623').with_type(TInt()), EVar('_var4671630').with_type(TInt()), EVar('_var4713058').with_type(TBag(TRecord((('regionkey', TInt()), ('name', TString()), ('comment', TString()))))), EVar('_var4731707').with_type(TInt()), EVar('_var4737300').with_type(TInt()), EVar('_var4742487').with_type(TInt()), EVar('_var4750356').with_type(TInt()), EVar('_var4750361').with_type(TInt()), EVar('_var4786149').with_type(TBag(TInt())), EVar('_var4807276').with_type(TInt()), EVar('_var4813951').with_type(TInt()), EVar('_var4819497').with_type(TInt()), EVar('_var4829042').with_type(TInt()), EVar('_var4829051').with_type(TInt()), EVar('_var4868834').with_type(TBag(TInt())), EVar('_var4890745').with_type(TInt()), EVar('_var4897855').with_type(TInt()), EVar('_var4904960').with_type(TInt()), EVar('_var4914851').with_type(TInt()), EVar('_var4914854').with_type(TInt()), EVar('_var4953371').with_type(TBag(TInt())), EVar('_var4976473').with_type(TInt()), EVar('_var4982038').with_type(TInt()), EVar('_var4987144').with_type(TInt()), EVar('_var4996762').with_type(TInt()), EVar('_var4996768').with_type(TInt()), EVar('_var5033285').with_type(TBag(TInt())), EVar('_var5054262').with_type(TInt()), EVar('_var5060027').with_type(TInt()), EVar('_var5066312').with_type(TInt()), EVar('_var5075647').with_type(TInt()), EVar('_var5075656').with_type(TInt()), EVar('_var5117541').with_type(TBag(TInt())), EVar('_var5141261').with_type(TInt()), EVar('_var5149051').with_type(TInt()), EVar('_var5154542').with_type(TInt()), EVar('_var5163923').with_type(TInt()), EVar('_var5163937').with_type(TInt()), EVar('_var5200659').with_type(TBag(TInt())), EVar('_var5220948').with_type(TInt()), EVar('_var5227258').with_type(TInt()), EVar('_var5232693').with_type(TInt()), EVar('_var5241898').with_type(TInt()), EVar('_var5241913').with_type(TInt()), EVar('_var5276208').with_type(TBag(TInt())), EVar('_var5297557').with_type(TInt()), EVar('_var5304289').with_type(TInt()), EVar('_var5311939').with_type(TInt()), EVar('_var5321786').with_type(TInt()), EVar('_var5321792').with_type(TInt()), EVar('_var5363591').with_type(TBag(TRecord((('orderkey', TInt()), ('custkey', TInt()), ('orderstatus', TNative('char')), ('totalprice', TFloat()), ('orderdate', TNative('uint64_t')), ('orderpriority', TString()), ('clerk', TString()), ('shippriority', TInt()), ('comment', TString()))))), EVar('_var5422184').with_type(TInt()), EVar('_var5430103').with_type(TInt()), EVar('_var5444943').with_type(TInt()), EVar('_var5444946').with_type(TInt()), EVar('_var5506824').with_type(TBag(TRecord((('partkey', TInt()), ('name', TString()), ('mfgr', TString()), ('brand', TString()), ('part_type', TString()), ('size', TInt()), ('container', TString()), ('retailprice', TFloat()), ('comment', TString()))))), EVar('_var5556010').with_type(TInt()), EVar('_var5562711').with_type(TInt()), EVar('_var5575493').with_type(TInt()), EVar('_var5575499').with_type(TInt()), EVar('_var5624901').with_type(TBag(TRecord((('suppkey', TInt()), ('name', TString()), ('address', TString()), ('nationkey', TInt()), ('phone', TString()), ('acctbal', TFloat()), ('comment', TString()))))), EVar('_var5686102').with_type(TInt()), EVar('_var5693632').with_type(TInt()), EVar('_var5709676').with_type(TInt()), EVar('_var5709682').with_type(TInt()), EVar('_var5772676').with_type(TBool()), EVar('_var5783031').with_type(TInt()), EVar('_var5785777').with_type(TInt()), EVar('_var5789358').with_type(TInt()), EVar('_var5793487').with_type(TInt()), EVar('_var5793502').with_type(TInt()), EVar('_var5822479').with_type(TMap(TInt(), TBag(TRecord((('orderkey', TInt()), ('partkey', TInt()), ('suppkey', TInt()), ('linenumber', TInt()), ('quantity', TFloat()), ('extendedprice', TFloat()), ('discount', TFloat()), ('tax', TFloat()), ('returnflag', TNative('char')), ('linestatus', TNative('char')), ('shipdate', TNative('uint64_t')), ('commitdate', TNative('uint64_t')), ('receiptdate', TNative('uint64_t')), ('shipinstruct', TString()), ('shipmode', TString()), ('comment', TString())))))), EVar('_var5857917').with_type(TInt()), EVar('_var5872929').with_type(TInt()), EVar('_var5887165').with_type(TInt()), EVar('_var5906662').with_type(TInt()), EVar('_var5906671').with_type(TInt()), EVar('_var5992419').with_type(TBag(TInt())), EVar('_var6017356').with_type(TInt()), EVar('_var6024888').with_type(TInt()), EVar('_var6032466').with_type(TInt()), EVar('_var6045633').with_type(TInt()), EVar('_var6045639').with_type(TInt())]), collection_depth=4, validate_model=True)

    def test_regression34(self):
        satisfy(
            EUnaryOp('not', EBinOp(EUnaryOp('len', EMap(EFilter(EStateVar(EVar('issues').with_type(TBag(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt()))))))).with_type(TBag(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt())))))), ELambda(EVar('i').with_type(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt()))))), EBinOp(EBinOp(EBinOp(EUnaryOp('exists', EMap(EFilter(EGetField(EGetField(EVar('i').with_type(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt()))))), 'val').with_type(TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt())))), 'statuses').with_type(TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ELambda(EVar('s').with_type(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool()))))), EBinOp(EGetField(EGetField(EVar('s').with_type(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool()))))), 'val').with_type(TRecord((('id', TInt()), ('is_closed', TBool())))), 'is_closed').with_type(TBool()), '==', EBool(False).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ELambda(EVar('s').with_type(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool()))))), EVar('s').with_type(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool()))))))).with_type(TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool()))))))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('i').with_type(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt()))))), 'val').with_type(TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt())))), 'assigned_to').with_type(TInt()), '==', EVar('p1').with_type(TInt())).with_type(TBool())).with_type(TBool()), 'and', EUnaryOp('exists', EMap(EFilter(EGetField(EGetField(EGetField(EGetField(EVar('i').with_type(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt()))))), 'val').with_type(TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt())))), 'project').with_type(THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), 'val').with_type(TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString()))))))))), 'modules').with_type(TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))), ELambda(EVar('m').with_type(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString()))))), ECall('is_issue_tracking', (EGetField(EGetField(EVar('m').with_type(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString()))))), 'val').with_type(TRecord((('id', TInt()), ('name', TString())))), 'name').with_type(TString()),)).with_type(TBool()))).with_type(TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))), ELambda(EVar('m').with_type(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString()))))), EVar('m').with_type(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString()))))))).with_type(TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString()))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EGetField(EGetField(EVar('i').with_type(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt()))))), 'val').with_type(TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt())))), 'project').with_type(THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), 'val').with_type(TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString()))))))))), 'status').with_type(TInt()), '!=', ENum(9).with_type(TInt())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt())))))), ELambda(EVar('i').with_type(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt()))))), EVar('i').with_type(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt()))))))).with_type(TBag(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt()))))))).with_type(TInt()), '==', ENum(0).with_type(TInt())).with_type(TBool())).with_type(TBool()),
            vars=OrderedSet([EVar('issues').with_type(TBag(THandle('Issue', TRecord((('id', TInt()), ('author_id', TInt()), ('project', THandle('Project', TRecord((('id', TInt()), ('status', TInt()), ('modules', TBag(THandle('ProjectModule', TRecord((('id', TInt()), ('name', TString())))))))))), ('statuses', TBag(THandle('IssueStatus', TRecord((('id', TInt()), ('is_closed', TBool())))))), ('assigned_to', TInt())))))), EVar('p1').with_type(TInt())]),
            collection_depth=4,
            validate_model=True)
